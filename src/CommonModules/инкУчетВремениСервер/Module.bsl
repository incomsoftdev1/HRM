				
#Область о // Производсвенный календарь:

// Функция - Получить данные производственного календаря за период 
//
// Параметры:
//  Дата1	 - Дата	 - Начало периода
//  Дата2	 - Дата	 - Конец периода
// 
// Возвращаемое значение:
//   - таблица значений
//
Функция ПолучитьДанныеПроизводственногоКалендаряЗаПериод(Дата1,Дата2) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
КонецФункции 
	  
// Функция - Получить данные производственного календаря
//
// Параметры:
//  ГодЧисло - число - год
// 
// Возвращаемое значение:
//   - таблица значений - данные производсвенного календаря
//
Функция ПолучитьДанныеПроизводственногоКалендаря(ГодЧисло) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	МЕСЯЦ(ДанныеПроизводственногоКалендаря.Дата) КАК Месяц,
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня,
	|	ДанныеПроизводственногоКалендаря.ДатаПереноса КАК ДатаПереноса
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Год = &Год";
	
	ПроизводственныйКалендарь = инкУчетВремениСервер.ПолучитьПроизводственныйКалендарьРФ();
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("Год", ГодЧисло);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  

  // Функция - Получить производственный календарь РФ
// 
// Возвращаемое значение:
//   - ссылка - производственный календарь РФ
//
Функция ПолучитьПроизводственныйКалендарьРФ() Экспорт
	
	ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	Если ПроизводственныйКалендарь.Пустая() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроизводственныйКалендарь;
	
КонецФункции

#КонецОбласти				

#Область о // Табель:

// Получает данные табеля из регистра сведений по параметрам.
//
// Параметры:
//
//		стрПараметры - структура, содержит параметры для запроса:
//			Организация		- ссылка, справочник инкОрганизации.	
//			Подразделение   - ссылка, справочник инкПодразделения.
// 			МесяцНачисления - дата.
Функция ПолучитьДанныеТабеляНаСервере(стрПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ втСотрудники
		|ИЗ
		|	РегистрСведений.инкКадроваяИсторияСотрудников.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение) КАК КадроваяИсторияСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	инкТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(инкТабельУчетаРабочегоВремени.День, ДЕНЬ) КАК Дата,
		|	инкТабельУчетаРабочегоВремени.ВДнях КАК ВДнях,
		|	инкТабельУчетаРабочегоВремени.ВЧасах КАК ВЧасах
		|ПОМЕСТИТЬ втПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.инкТабельУчетаРабочегоВремени КАК инкТабельУчетаРабочегоВремени
		|ГДЕ
		|	инкТабельУчетаРабочегоВремени.День МЕЖДУ &Дата1 И &Дата2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроизводственныйКалендарь.Сотрудник КАК Сотрудник,
		|	втПроизводственныйКалендарь.Сотрудник.Наименование КАК СотрудникНаименование,
		|	втПроизводственныйКалендарь.Дата КАК Дата,
		|	втПроизводственныйКалендарь.ВДнях КАК ВДнях,
		|	втПроизводственныйКалендарь.ВЧасах КАК ВЧасах
		|ИЗ
		|	втПроизводственныйКалендарь КАК втПроизводственныйКалендарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСотрудники КАК втСотрудники
		|		ПО втПроизводственныйКалендарь.Сотрудник = втСотрудники.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование";
	
	
	Если Не ЗначениеЗаполнено(стрПараметры.Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Подразделение = &Подразделение","Истина");  	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", стрПараметры.Организация);
	Запрос.УстановитьПараметр("Подразделение", стрПараметры.Подразделение);
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(стрПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(стрПараметры.МесяцНачисления));
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз; 
	
КонецФункции

// Формирует структуру для получения данных табеля. См. ПолучитьДанныеТабеляНаСервере
Функция ПолучитьСтруктуруДляДанныхТабеля() Экспорт 
	
	стр = Новый Структура;
	стр.Вставить("Организация");
	стр.Вставить("Подразделение");
	стр.Вставить("МесяцНачисления");
	                         
	Возврат стр;
	
КонецФункции

// Функция - Получить табель таблица
//
// Параметры:
//  ИсходныеДанные	 - структура	 - Содержит период и ссылку на сотрудника.
// 
// Возвращаемое значение:
//   - Таблица значений - Данные по табелю за период.
//
Функция ПолучитьТабельТаблица(ИсходныеДанные) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
		|	инкТабельУчетаРабочегоВремени.День КАК День,
		|	инкТабельУчетаРабочегоВремени.Месяц КАК Месяц,
		|	инкТабельУчетаРабочегоВремени.ВДнях КАК ВДнях,
		|	инкТабельУчетаРабочегоВремени.ВЧасах КАК ВЧасах
		|ИЗ
		|	РегистрСведений.инкТабельУчетаРабочегоВремени КАК инкТабельУчетаРабочегоВремени
		|ГДЕ
		|	инкТабельУчетаРабочегоВремени.День МЕЖДУ &Дата1 И &Дата2
		|	И инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);  
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Сотрудник") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник","Истина");	
	Иначе
		Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник); 	
	КонецЕсли;
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;
	
КонецФункции            

#КонецОбласти				

#Область о // Норма времени:

// Процедура - Загрузка нормы времени из годового фонда рабочего времени на сервере
//
// Параметры:
//
//		Год - число, год по которому загружаются данные из ФРВ. 
//
Процедура ЗагрузитьНормуВремениИзГодовогоФондаРабочегоВремениНаСервере(Год) Экспорт
	
	ДанныеПроизводственногоКалендаря  = инкУчетВремениСервер.ПолучитьДанныеПроизводственногоКалендаря(Год);
		
	НаборЗаписей = РегистрыСведений.инкНормаВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(Год);
	НаборЗаписей.Прочитать();
	
	ТекущийМесяц = Дата(Формат(Год,"ЧГ=")+"0101000000");
	ПоискМесяца = Новый Структура("Месяц");
	Для МесяцЧисло = 1 По 12 Цикл
		
		ПоискМесяца.Месяц = МесяцЧисло;	
		ПКМассив = ДанныеПроизводственногоКалендаря.НайтиСтроки(ПоискМесяца);		
		РабочихДнейВМесяце = 0;
		ПредпраздничныхДнейВМесяце = 0;
		Для каждого ПКДеньМесяца Из ПКМассив Цикл
			
			Если ПКДеньМесяца.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				РабочихДнейВМесяце = РабочихДнейВМесяце + 1;
			ИначеЕсли ПКДеньМесяца.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				ПредпраздничныхДнейВМесяце = ПредпраздничныхДнейВМесяце + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если РабочихДнейВМесяце > 0 Тогда
			
			ЗаписьНабораТекущегоМесяца = Неопределено;
			
			Для каждого Запись Из НаборЗаписей Цикл
					
				Если Запись.Месяц = ТекущийМесяц Тогда

					ЗаписьНабораТекущегоМесяца = Запись;	
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;      			                
			
			Если ЗаписьНабораТекущегоМесяца = Неопределено Тогда
				
				ЗаписьНабораТекущегоМесяца = НаборЗаписей.Добавить();	
				                         
			КонецЕсли;
			
			ЗаписьНабораТекущегоМесяца.Период						= НачалоГода(ТекущийМесяц);			
			ЗаписьНабораТекущегоМесяца.Год							= Год;
			ЗаписьНабораТекущегоМесяца.Месяц 						= ТекущийМесяц;
			ЗаписьНабораТекущегоМесяца.РабочихДнейВМесяце  			= РабочихДнейВМесяце + ПредпраздничныхДнейВМесяце;
			ЗаписьНабораТекущегоМесяца.НормаЧасовМужчиныПятидневка 	= (РабочихДнейВМесяце * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.НормаЧасовЖенщиныПятидневка 	= (РабочихДнейВМесяце * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.Шестидневка                 	= РабочихДнейВМесяце + ПредпраздничныхДнейВМесяце + 1; 
			ЗаписьНабораТекущегоМесяца.НормаЧасовМужчиныШестидневка = ((РабочихДнейВМесяце + 1) * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.НормаЧасовЖенщиныШестидневка = ((РабочихДнейВМесяце + 1) * 8) + (ПредпраздничныхДнейВМесяце * 7);;
			
			ЗаписьНабораТекущегоМесяца.КалендраныхДней				= День(КонецМесяца(ТекущийМесяц));
			
		КонецЕсли;
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц,1);	
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	Сообщить("Данные за "+Год+" год загружены в данные нормы времени.");
	
КонецПроцедуры

// Функция - Получить норма времени таблица
//
// Параметры:
//  ИсходныеДанные	 - структура	 - Содержит период по которому идет отбор.
// 
// Возвращаемое значение:
//   - Таблица значений нормы времени.
//
Функция ПолучитьНормаВремениТаблица(ИсходныеДанные) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНормаВремени.Год КАК Год,
		|	инкНормаВремени.Месяц КАК Месяц,
		|	инкНормаВремени.РабочихДнейВМесяце КАК РабочихДнейВМесяце,
		|	инкНормаВремени.НормаЧасовМужчиныПятидневка КАК НормаЧасовМужчиныПятидневка,
		|	инкНормаВремени.НормаЧасовЖенщиныПятидневка КАК НормаЧасовЖенщиныПятидневка,
		|	инкНормаВремени.Шестидневка КАК Шестидневка,
		|	инкНормаВремени.НормаЧасовМужчиныШестидневка КАК НормаЧасовМужчиныШестидневка,
		|	инкНормаВремени.НормаЧасовЖенщиныШестидневка КАК НормаЧасовЖенщиныШестидневка,
		|	инкНормаВремени.КалендраныхДней КАК КалендраныхДней
		|ИЗ
		|	РегистрСведений.инкНормаВремени КАК инкНормаВремени
		|ГДЕ
		|	инкНормаВремени.Период МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ИсходныеДанные.Дата1));
	Запрос.УстановитьПараметр("Дата2", НачалоГода(ИсходныеДанные.Дата2));
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;	
	
КонецФункции


// Функция - Получить норму времени из ведомости
//
// Параметры:
//  ИсходныеДанные	 - структура - Содержит период запроса и ссылку на сотрудника.
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьНормуВремениИзВедомости(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостиОбороты.Период КАК Месяц,
		|	инкВедомостиОбороты.Сотрудник КАК Сотрудник,
		|	инкВедомостиОбороты.ДниОборот КАК Дни,
		|	инкВедомостиОбороты.ДниФактОборот КАК ДниФакт,
		|	инкВедомостиОбороты.ЧасыОборот КАК Часы,
		|	инкВедомостиОбороты.ЧасыФактОборот КАК ЧасыФакт,
		|	инкВедомостиОбороты.НормаДниОборот КАК НормаДни,
		|	инкВедомостиОбороты.НормаДниФактОборот КАК НормаДниФакт,
		|	инкВедомостиОбороты.НормаЧасыОборот КАК НормаЧасы,
		|	инкВедомостиОбороты.НормаЧасыФактОборот КАК НормаЧасыФакт
		|ИЗ
		|	РегистрНакопления.инкВедомости.Обороты(&Дата1, &Дата2, МЕСЯЦ, Сотрудник = &Сотрудник) КАК инкВедомостиОбороты";
	                                                          
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Сотрудник") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Сотрудник = &Сотрудник","Истина");	
	Иначе
		Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник); 	
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

#КонецОбласти				
