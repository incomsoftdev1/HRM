
#Область о // Стандартные процедуры и функции:

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьРеквизитыПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчаниюНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Объект.МесяцНачисления = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	МесяцНачисленияСтрокой  = инкЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ВидРасчетаДниЧасы",Перечисления.инкВидРасчетаДниЧасы.ВДнях,Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВКалендарныхДнях = Истина;
	КонецЕсли;                           

	мПереключательОклад = Ложь;
	мПереключательНачисленияУдержания = "Начисления"; 
	
	УстановитьВидимостьКолонокВедомости();   
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьПоляНачислений()
	
	ПоляТаблицы = Новый Массив;  
	ПоляТаблицы.Добавить("Оклад");
	ПоляТаблицы.Добавить("СотрудникОклад");
	ПоляТаблицы.Добавить("Дни");
	ПоляТаблицы.Добавить("ДниФакт");
	ПоляТаблицы.Добавить("Часы");
	ПоляТаблицы.Добавить("ЧасыФакт");
	ПоляТаблицы.Добавить("НормаДни");
	ПоляТаблицы.Добавить("НормаДниФакт");
	ПоляТаблицы.Добавить("НормаЧасы");
	ПоляТаблицы.Добавить("НормаЧасыФакт");
	ПоляТаблицы.Добавить("РайонныйКоэффициент");
	ПоляТаблицы.Добавить("СевернаяНадбавка");
	ПоляТаблицы.Добавить("Отпуск");
	ПоляТаблицы.Добавить("БольничныйЛист");
	ПоляТаблицы.Добавить("ПрочиеНачисления");
	ПоляТаблицы.Добавить("ВсегоНачислено");
	
	Возврат ПоляТаблицы;
	
КонецФункции

&НаСервере
Функция ПолучитьПоляУдержаний()

	ПоляТаблицы = Новый Массив;
	ПоляТаблицы.Добавить("НДФЛ");
	ПоляТаблицы.Добавить("Профсоюз");
	ПоляТаблицы.Добавить("Алименты");
	ПоляТаблицы.Добавить("КВыплате");
	ПоляТаблицы.Добавить("ПрочиеУдержания");
	ПоляТаблицы.Добавить("ВсегоУдержано");
	
	Возврат ПоляТаблицы;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьКолонокВедомости()

	ОтображениеНачислений = (мПереключательНачисленияУдержания = "Начисления");

	// Начисления:
	ПоляНачисленийМассив = ПолучитьПоляНачислений();
	Для каждого ПолеНачисления Из ПоляНачисленийМассив Цикл
		Элементы["Ведомость"+ПолеНачисления].Видимость = ОтображениеНачислений;	
	КонецЦикла;
	
	// Удержания:
	ПоляУдержанийМассив = ПолучитьПоляУдержаний();
	Для каждого ПолеУдержания Из ПоляУдержанийМассив Цикл
		Элементы["Ведомость"+ПолеУдержания].Видимость = НЕ ОтображениеНачислений;	
	КонецЦикла;
	
	Если ОтображениеНачислений Тогда
		УстановитьВидимостьДниЧасы();
		УстановитьВидимостьОклада();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОклада()
	
	Элементы.ВедомостьОклад.Видимость = НЕ мПереключательОклад;
	Элементы.ВедомостьСотрудникОклад.Видимость = мПереключательОклад;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДниЧасы()
	
	Перем ВидимостьДниБулево;
	ВидимостьДниБулево = Истина;
	Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВЧасах Тогда
		ВидимостьДниБулево = Ложь;	
	КонецЕсли;
	
	Элементы.ВедомостьДни.Видимость 			= (ВидимостьДниБулево И Объект.ВКалендарныхДнях);
	Элементы.ВедомостьДниФакт.Видимость 		= (ВидимостьДниБулево И Объект.ВКалендарныхДнях);
	Элементы.ВедомостьНормаДни.Видимость 		= (ВидимостьДниБулево И НЕ Объект.ВКалендарныхДнях);
	Элементы.ВедомостьНормаДниФакт.Видимость 	= (ВидимостьДниБулево И НЕ Объект.ВКалендарныхДнях);
	
	Элементы.ВедомостьЧасы.Видимость 			= (НЕ ВидимостьДниБулево И Объект.ВКалендарныхДнях);
	Элементы.ВедомостьЧасыФакт.Видимость 		= (НЕ ВидимостьДниБулево И Объект.ВКалендарныхДнях);
	Элементы.ВедомостьНормаЧасы.Видимость 		= (НЕ ВидимостьДниБулево И НЕ Объект.ВКалендарныхДнях);
	Элементы.ВедомостьНормаЧасыФакт.Видимость 	= (НЕ ВидимостьДниБулево И НЕ Объект.ВКалендарныхДнях);

КонецПроцедуры

&НаКлиенте
Процедура НормаВремениПриИзменении(Элемент) 
	
	УстановитьВидимостьКолонокВедомости();

КонецПроцедуры

&НаКлиенте
Процедура мПереключательОкладПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	//УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Дата <> ДатаПредыдущая
		И НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.МесяцНачисления) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите дату в интервале с %1 по %2'"),
			Формат(НачалоМесяца(Объект.МесяцНачисления), "ДЛФ=D"),
			Формат(КонецМесяца(Объект.МесяцНачисления), "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Дата", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	
	ТекстВопроса = "При изменении реквизита перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораПродолжение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
    
    Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
        ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
    	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
    	ОткрытьФорму("ОбщаяФорма.инкВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Объект.МесяцНачисления, , , , ОписаниеОповещения);
    КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	Объект.МесяцНачисления = РезультатВыбора.НачалоПериода;
    инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", 0, Модифицированность);
    ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);

КонецПроцедуры
    
&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	ДопПараметры.Вставить("Направление",Направление);
	
	ТекстВопроса = "При изменении реквизита перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойРегулированиеЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулированиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Параметры.Направление, Модифицированность);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		//ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
		
	Иначе
		ЗакрытьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокумент()
	
	ЕстьДанные = Объект.ПрочиеНачисления.Количество() > 0
		ИЛИ Объект.ПрочиеУдержания.Количество() > 0
		ИЛИ Объект.НДФЛ.Количество() > 0
		;
		
	Если ЕстьДанные Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ПодготовитьДокументКЗаполнениюНаСервере(ДокОбъект);
	
	стрДанныеНачисленияЗарплаты = инкРасчетЗаработнойПлатыСервер.ПолучитьСтрукруруДанныхНачисленияЗарплаты(ДокОбъект);
	
	МенеджерРасчета = Обработки.инкРасчетЗарабатнойПлаты.Создать();
	МенеджерРасчета.Инициализация();
	
	МенеджерРасчета.ДанныеНачисленияЗарплаты = стрДанныеНачисленияЗарплаты;
	МенеджерРасчета.ВыполнитьРасчетЗаработнойПлаты();
	
	ДокОбъект = МенеджерРасчета.ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты; 
    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ПодготовитьДокументКЗаполнениюНаСервере(ДокОбъект)

	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	Для каждого ТабличнаяЧастьДокумента из СписокТабличныхЧастей Цикл
		ДокОбъект[ТабличнаяЧастьДокумента].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ОбработатьИзменениеМесяцНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	Объект.Дата = НачалоДня(КонецМесяца(Объект.МесяцНачисления));
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьТабличныеЧасти();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура мПереключательНачисленияУдержанияПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();

КонецПроцедуры

#КонецОбласти

#Область о // Стандартные подсистемы:

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область о // Отчеты:

&НаКлиенте
Процедура ВывестиРезультатРасчета(Сотрудники = Неопределено)
	
	ТабличныйДокумент = ПолучитьРезультатРасчетаСервер(Сотрудники);
	инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"Расчетные листки",ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатРасчетаСервер(Сотрудники) 
	
	МенеджерПечати = Обработки.инкРасчетныеЛисты.Создать();
	Если Не ЗначениеЗаполнено(Сотрудники) Тогда
		
		СотрудникиМассив = Новый Массив;
		Для каждого СотрудникСтрока из Объект.Ведомость Цикл
			СотрудникиМассив.Добавить(СотрудникСтрока.Сотрудник);
		КонецЦикла;
		
		МенеджерПечати.СотрудникиМассив = СотрудникиМассив;
		
	Иначе
		
		МенеджерПечати.СотрудникиМассив = Сотрудники;
		
	КонецЕсли;
	
	МенеджерПечати.ДокументОбъект = Объект;
	ТабличныйДокумент = МенеджерПечати.ПолучитьРезультатРасчета();

	Возврат ТабличныйДокумент; 
	
КонецФункции

&НаКлиенте
Процедура РасчетныеЛистки(Команда)
	
	ВывестиРезультатРасчета();
	
КонецПроцедуры

#КонецОбласти

#Область о // Обработчики команд формы:

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Ведомость");
	СписокТабличныхЧастей.Добавить("ПрочиеНачисления");
	СписокТабличныхЧастей.Добавить("ПрочиеУдержания");
	СписокТабличныхЧастей.Добавить("ВычетыНДФЛ");
	СписокТабличныхЧастей.Добавить("НДФЛ");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникФИОСокращенноеНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОбновляемыхРаботников(Знач ИдентификаторыСтрок)
	
	ЭтотОбъект.ОбновляемыеСотрудники = Неопределено;
	СписокОбновляемыхРаботников(ИдентификаторыСтрок,"ОбновляемыеСотрудники","Сотрудник");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныхСотрудников(СотрудникиМассив)
	
	СписокТабличныхЧастейДокумента = СписокТабличныхЧастейДокумента();
	
	Для каждого СотрудникСтрока из СотрудникиМассив Цикл 
		
		Для каждого ТабличнаяЧасть из СписокТабличныхЧастейДокумента Цикл
			
			УдалитьДанныеИзТабличнойЧасти(ТабличнаяЧасть,СотрудникСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеИзТабличнойЧасти(ТабличнаяЧасть,СотрудникСтрока)
	
	ТабличнаяЧастьОбъекта = Объект[ТабличнаяЧасть];
	
	ПоискСотрудника = Новый Структура("Сотрудник",СотрудникСтрока);
	МассивСтрок = ТабличнаяЧастьОбъекта.НайтиСтроки(ПоискСотрудника);
	
	Для каждого СтрокаЭлемент из МассивСтрок Цикл
		ТабличнаяЧастьОбъекта.Удалить(СтрокаЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокОбновляемыхРаботников(Знач ИдентификаторыСтрок, ИмяПриемника, ИмяРеквизита)
	
	РаботникиКОбновлению = Новый Соответствие;
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		СписокИдентификаторовСтрок = ИдентификаторыСтрок;
	Иначе
		СписокИдентификаторовСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из СписокИдентификаторовСтрок Цикл
		
		СтрокаРаботника = Объект.Ведомость.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаРаботника <> Неопределено И ЗначениеЗаполнено(СтрокаРаботника[ИмяРеквизита]) Тогда
			РаботникиКОбновлению.Вставить(СтрокаРаботника[ИмяРеквизита], Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтотОбъект[ИмяПриемника] <> Неопределено Тогда
		
		СписокОбновляемых = Новый Массив(ЭтотОбъект[ИмяПриемника]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ"), Истина);
		
	Иначе
		СписокОбновляемых = ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ");
	КонецЕсли;
	
	ЭтотОбъект[ИмяПриемника] = Новый ФиксированныйМассив(СписокОбновляемых);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(
				Объект.Ведомость.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"),
				УникальныйИдентификатор);
	
	КонецФункции

&НаКлиенте
Процедура ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение, ПерезаполнятьВедомость = Истина)

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	ДопПараметры.Вставить("ВыбранноеЗначение",ВыбранноеЗначение);
	ДопПараметры.Вставить("ПерезаполнятьВедомость",ПерезаполнятьВедомость);
	                                             	
	ТекстВопроса = "При изменении реквизита "
	             + Элемент.Имя
				 + " перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("ИзменениеКлючевыхРеквизитовРасчетаЗарплатыЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКлючевыхРеквизитовРасчетаЗарплатыЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Параметры.Элемент.Имя = "МесяцНачисленияСтрокой" Тогда
			
			Значение = Параметры.ВыбранноеЗначение.НачалоПериода; 
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "Объект.МесяцНачисления", Значение);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "МесяцНачисленияСтрокой", инкЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));

		Иначе
			
			Объект[Параметры.Элемент.Имя] = Параметры.ВыбранноеЗначение;	
		КонецЕсли;
		
		ОчиститьТабличныеЧасти();
		Если Параметры.ПерезаполнятьВедомость Тогда
			Заполнить(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудниковНаКлиенте()

	ПараметрыОтбораСтруктура = ПолучитьСтруктуруПараметровОткрытияДляДобавленияСотрудниковНаСервере();
	ПараметрыОткрытия = Новый Структура("ПараметрыОтбора", ПараметрыОтбораСтруктура);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСотрудниковЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Справочник.инкСотрудники.ФормаВыбора", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровОткрытияДляДобавленияСотрудниковНаСервере()
	
	ПараметрыОтбора = Новый Структура;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда

		НастройкаОтбора = Новый Структура;
		НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Организация"));
		НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Организация);
	    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ПараметрыОтбора.Вставить("Организация", НастройкаОтбора);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		НастройкаОтбора = Новый Структура;
		НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Подразделение"));
		НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Подразделение);
	    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ПараметрыОтбора.Вставить("Подразделение", НастройкаОтбора);
		
	КонецЕсли;
	
	НастройкаОтбора = Новый Структура;
	НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Ссылка"));
	НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеВСписке);
	НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Ведомость.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ПараметрыОтбора.Вставить("Ссылка", НастройкаОтбора);
		
	Возврат ПараметрыОтбора; 

КонецФункции
	
&НаКлиенте
Процедура ДобавитьСотрудниковЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		ДобавитьСотрудниковНаСервере(РезультатРедактирования);
	КонецЕсли;
	    	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАнкетныхДанныхНаКлиенте(Сотрудник)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Сотрудник);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеАнкетныхДанныхЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Справочник.инкСотрудники.Форма.ФормаЭлемента", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАнкетныхДанныхЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		Если РезультатРедактирования.Модифицированность Тогда 
			ПересчитатьСотрудниковНаСервере(РезультатРедактирования.СотрудникСсылка,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудниковНаСервере(РезультатРедактирования)
	
	СотрудникиМассив = Новый Массив; 
	Если ТипЗнч(РезультатРедактирования) = Тип("СправочникСсылка.инкСотрудники") Тогда
		СотрудникиМассив.Добавить(РезультатРедактирования);
	ИначеЕсли ТипЗнч(РезультатРедактирования) = Тип("Массив") Тогда 
		СотрудникиМассив = РезультатРедактирования;	
	КонецЕсли;
	
	Если СотрудникиМассив.Количество() > 0 Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ДобавитьСотрудниковВВедомость(СотрудникиМассив);
	    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудниковНаСервере(СписокСотрудников = Неопределено,ПерерасчетСотрудника = Истина)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПересчетСотрудниковВОбъекте(СписокСотрудников,ПерерасчетСотрудника);
    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ВопросПередУдалениемСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемСотрудников()
	
	ТекстВопроса = НСтр("ru = 'Удалить расчет по выбранным сотрудникам?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПередУдалениемСотрудниковЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемСотрудниковЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьСписокОбновляемыхРаботников(Элементы.Ведомость.ВыделенныеСтроки);
		УдалитьВыбранныхСотрудников(ЭтотОбъект.ОбновляемыеСотрудники);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПересчитатьСотрудниковНаСервере(ТекущиеДанные.Сотрудник);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьСотрудниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не инкЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	СортироватьСтроки("Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	СортироватьСтроки("Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыРасчета(Команда)
	
	ВедомостьВыделенныеСтроки = Элементы.Ведомость.ТекущиеДанные;
	Если ВедомостьВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиМассив = Новый Массив;
	СотрудникиМассив.Добавить(ВедомостьВыделенныеСтроки.Сотрудник);	
	
	ВывестиРезультатРасчета(СотрудникиМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРасчета(Команда)
	
	ВедомостьВыделенныеСтроки = Элементы.Ведомость.ТекущиеДанные;
	Если ВедомостьВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиМассив = Новый Массив;
	СотрудникиМассив.Добавить(ВедомостьВыделенныеСтроки.Сотрудник);	
	ДопПараметры = Новый Структура("СотрудникиМассив",СотрудникиМассив);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопПараметры);
		   
	ПараметрыОткрытия = Новый Структура;
		   
	ОткрытьФорму("ОбщаяФорма.инкВыборПериода", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьРасчетныеЛисткиНаСервере(Период,СотрудникиМассив)
	
	МенеджерПечати = Обработки.инкРасчетныеЛисты.Создать();
	МенеджерПечати.СотрудникиМассив = СотрудникиМассив;
	МенеджерПечати.Дата1 = Период.ДатаНачала;
	МенеджерПечати.Дата2 = Период.ДатаОкончания;
	ТабличныйДокумент = МенеджерПечати.ПолучитьРасчетныеЛистки();

	Возврат ТабличныйДокумент; 
	
КонецФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ТабличныйДокумент = ПолучитьРасчетныеЛисткиНаСервере(РезультатРедактирования.Период,ДополнительныеПараметры.СотрудникиМассив);
		инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"Расчетные листки",ЭтаФорма);
			
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура АнкетныеДанные(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Сотрудник      = Элементы.Ведомость.ТекущиеДанные.Сотрудник;
	
	ОткрытьФормуАнкетныхДанныхНаКлиенте(Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеНачисленияОкончание(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Параметры.Вставить("Начисление", Результат);
		
		ОткрытьФормуВводаНачисления(Параметры);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеНачисления(ПараметрыВвода)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВсеНачисленияОкончание", ЭтотОбъект, ПараметрыВвода);
	
	Категории = Новый Массив;
	Категории.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее"));
	Категории.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда"));
	
	ПараметрыОтбора = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категории);

	ОткрытьФорму("ПланВидовРасчета.ПрочиеНачисления.ФормаВыбора",
		Новый Структура("Отбор", ПараметрыОтбора),
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаНачисления(Параметры)
	
	АдресПараметровВХранилище = ПоместитьВоВременноеХранилище(Параметры, УникальныйИдентификатор);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище);
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаДобавитьНачисление", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеУдержанияОкончание(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Параметры.Вставить("Удержание", Результат);
		
		ОткрытьФормуВводаУдержания(Параметры);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеУдержания(ПараметрыВвода)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВсеУдержанияОкончание", ЭтотОбъект, ПараметрыВвода);
	
	ОткрытьФорму("ПланВидовРасчета.ПрочиеУдержания.ФормаВыбора",
		,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаУдержания(Параметры)
	
	АдресПараметровВХранилище = ПоместитьВоВременноеХранилище(Параметры, УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище);
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаДобавитьУдержание", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСтроки(Направление)
	
	Объект.Ведомость.Сортировать("Сотрудник " + Направление + ", Совместитель");
	
КонецПроцедуры

&НаСервере
Функция ОбъектРасчетаЗарплатыИСотрудникВХранилище(Сотрудник)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОбъектРасчетаЗарплаты",РеквизитФормыВЗначение("Объект"));
	ПараметрыРасчета.Вставить("Сотрудник",Сотрудник);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СотрудникВХранилище(СотрудникСсылка)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сотрудник",СотрудникСсылка);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ВыборСпискаСотрудниковВХранилище(ВопросПриВыборе)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СотрудникиМассив",Объект.Ведомость.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	ПараметрыРасчета.Вставить("ВопросПриВыборе",ВопросПриВыборе);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ОбъектРасчетаЗарплатыВХранилище()
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОбъектРасчетаЗарплаты",РеквизитФормыВЗначение("Объект"));
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции                            

&НаСервере
Процедура ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ссСотрудник			= ПараметрыРасчета.Сотрудник;
	тзПрочиеНачисления	= ПараметрыРасчета.тзПрочиеНачисления;
	ДокументСсылка		= Неопределено;
	Если ПараметрыРасчета.Свойство("ДокументСсылка") Тогда
		ДокументСсылка	= ПараметрыРасчета.ДокументСсылка;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(ссСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если тзПрочиеНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Удаление строк начислений:
	стрПоиск = Новый Структура;
	стрПоиск.Вставить("Сотрудник",ссСотрудник);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		стрПоиск.Вставить("ДокументСсылка",ДокументСсылка);		
	КонецЕсли;
	массСтрокиПрочихНачислений = Объект.ПрочиеНачисления.НайтиСтроки(стрПоиск);
	Для Каждого ЭлементМассив Из массСтрокиПрочихНачислений Цикл
		Объект.ПрочиеНачисления.Удалить(ЭлементМассив); 
	КонецЦикла;
	
	Для каждого стртзПрочиеНачисления из тзПрочиеНачисления Цикл

		Если (стртзПрочиеНачисления.СуммаНачисления = 0) Тогда
			Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
				Если стртзПрочиеНачисления.ПроцентОтБазы = 0 Тогда
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(стртзПрочиеНачисления.Начисление) Тогда
			Продолжить;
		КонецЕсли; 
		
		стрПрочиеНачисления = Объект.ПрочиеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(стрПрочиеНачисления,стртзПрочиеНачисления);
		стрПрочиеНачисления.Сотрудник = ссСотрудник;
		стрПрочиеНачисления.Подразделение = ссСотрудник.Подразделение; 
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
        	стрПрочиеНачисления.ДокументСсылка = ДокументСсылка;			
		КонецЕсли;		
		
	КонецЦикла;
		
	ПересчитатьСотрудниковНаСервере(ссСотрудник);	
		
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьПрочиеУдержанияНаСервере(РезультатРедактирования);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ссСотрудник			= ПараметрыРасчета.Сотрудник;
	тзПрочиеУдержания	= ПараметрыРасчета.тзПрочиеУдержания;
	
	Если ЗначениеЗаполнено(ссСотрудник) Тогда
		
		стрПоиск = Новый Структура("Сотрудник",ссСотрудник);
		массСтрокиПрочихУдержаний = Объект.ПрочиеУдержания.НайтиСтроки(стрПоиск);
		Для Каждого ЭлементМассив Из массСтрокиПрочихУдержаний Цикл
			Объект.ПрочиеУдержания.Удалить(ЭлементМассив); //удаляем строки
		КонецЦикла;
			
		Для каждого стртзПрочиеУдержания из тзПрочиеУдержания Цикл

			Если ((стртзПрочиеУдержания.СуммаУдержания = 0) И (стртзПрочиеУдержания.ПроцентОтБазы = 0)) ИЛИ  
				 НЕ ЗначениеЗаполнено(стртзПрочиеУдержания.Удержание)	
			Тогда
				Продолжить;
			КонецЕсли;  
			
			стрПрочиеУдержания = Объект.ПрочиеУдержания.Добавить(); 
			ЗаполнитьЗначенияСвойств(стрПрочиеУдержания,стртзПрочиеУдержания);
			стрПрочиеУдержания.Сотрудник = ссСотрудник;
			стрПрочиеУдержания.Подразделение = ссСотрудник.Подразделение; 
			
		КонецЦикла;
	
		ПересчитатьСотрудниковНаСервере(ссСотрудник);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеУдержанийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьПрочиеУдержанияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрочиеУдержания(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Оповещение = Новый ОписаниеОповещения("РедактированиеУдержанийЗавершение", ЭтотОбъект);
	
	Сотрудник      = Элементы.Ведомость.ТекущиеДанные.Сотрудник;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыИСотрудникВХранилище(Сотрудник));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПрочиеУдержания", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#Область о // Больничный лист:

&НаКлиенте
Процедура БольничныйЛист(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыФормы.Вставить("Сотрудник", Элементы.Ведомость.ТекущиеДанные.Сотрудник);

	ОткрытьФормуБольничногоЛистаНаКлиенте(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуБольничногоЛистаНаКлиенте(ПараметрыФормы)

	БольничныеЛисты = ПолучитьПереченьБольничныхЛистовНаСервере(ПараметрыФормы);
	
	Если БольничныеЛисты.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборБольничногоЛистаЗавершение",ЭтотОбъект,ПараметрыФормы);
		
//		ЗначениеОтбора = Новый Структура;
//		ЗначениеОтбора.Вставить("Сотрудник", ПараметрыФормы.Сотрудник);
//		ЗначениеОтбора.Вставить("МесяцНачисления", ПараметрыФормы.МесяцНачисления);
		
		ПараметрыОтбора = Новый Структура("Отбор", ПараметрыФормы);
		
		ОткрытьФорму("Документ.инкБольничныйЛист.ФормаВыбора",
					 ПараметрыОтбора,
					 ЭтотОбъект,
					 УникальныйИдентификатор,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе

		ОткрытьФормуДокументаБольничногоЛиста(ПараметрыФормы);		
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьПереченьБольничныхЛистовНаСервере(ПараметрыФормы)
	
	Возврат Документы.инкБольничныйЛист.ПолучитьПереченьБольничныхЛистов(ПараметрыФормы);	
	
КонецФункции

&НаКлиенте
Процедура ВыборБольничногоЛистаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ДополнительныеПараметры.Вставить("Ключ",РезультатРедактирования);
		ОткрытьФормуДокументаБольничногоЛиста(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуДокументаБольничногоЛиста(ПараметрыФормы)
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеБольничногоЛистаЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкБольничныйЛист.Форма.ФормаДокумента", 
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеБольничногоЛистаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область о // Отпуск:

&НаКлиенте
Процедура ОтпускРасчетПоСреднему(Команда)

	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыФормы.Вставить("Сотрудник", Элементы.Ведомость.ТекущиеДанные.Сотрудник);    
	ПараметрыФормы.Вставить("ВидРасчетаДниЧасы", Объект.ВидРасчетаДниЧасы);    
		                                                                                     
	ОткрытьФормуОтпускаНаКлиенте(ПараметрыФормы);

КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьФормуОтпускаНаКлиенте(ПараметрыФормы)

	ПереченьОтпусков = ПолучитьПереченьОтпусковНаСервере(ПараметрыФормы);
	
	Если ПереченьОтпусков.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборОтпускаЗавершение",ЭтотОбъект,ПараметрыФормы);
		
//		ЗначениеОтбора = Новый Структура;
//		ЗначениеОтбора.Вставить("Сотрудник", ПараметрыФормы.Сотрудник);
//		ЗначениеОтбора.Вставить("МесяцНачисления", ПараметрыФормы.МесяцНачисления);
		
		ПараметрыОтбора = Новый Структура("Отбор", ПараметрыФормы);
		
		ОткрытьФорму("Документ.инкОтпускРасчетПоСреднему.ФормаВыбора",
					 ПараметрыОтбора,
					 ЭтотОбъект,
					 УникальныйИдентификатор,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе

		ОткрытьФормуДокументаОтпуск(ПараметрыФормы);		
		
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ВыборОтпускаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ДополнительныеПараметры.Вставить("Ключ",РезультатРедактирования);
		ОткрытьФормуДокументаОтпуск(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьПереченьОтпусковНаСервере(ПараметрыФормы);
	
	Возврат Документы.инкОтпускРасчетПоСреднему.ПолучитьПереченьОтпусков(ПараметрыФормы);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокументаОтпуск(ПараметрыФормы)
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеОтпускаЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкОтпускРасчетПоСреднему.Форма.ФормаДокумента", 
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  
	
&НаКлиенте
Процедура РедактированиеОтпускаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПересчитатьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПересчитатьСотрудниковНаСервере(ТекущиеДанные.Сотрудник);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельИзменить(Команда)
	
	стрПараметры = Новый Структура;
	стрПараметры.Вставить("Организация",Объект.Организация);
	стрПараметры.Вставить("Подразделение",Объект.Подразделение);
	стрПараметры.Вставить("МесяцНачисления",Объект.МесяцНачисления);
	
	ОткрытьФорму("РегистрСведений.инкТабельУчетаРабочегоВремени.Форма.ФормаТабельУчетаРабочегоВремени", стрПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ПересчитатьСотрудниковНаСервере(ТекущиеДанные.Сотрудник);	
	
КонецПроцедуры

&НаСервере
Процедура ТабельВставитьДанныеВсемНаСервере(Сотрудник = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА инкТабельУчетаРабочегоВремени.ВДнях = ""Я""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВДнях,
		|	СУММА(инкТабельУчетаРабочегоВремени.ВЧасах) КАК ВЧасах
		|ИЗ
		|	РегистрСведений.инкТабельУчетаРабочегоВремени КАК инкТабельУчетаРабочегоВремени
		|ГДЕ
		|	инкТабельУчетаРабочегоВремени.Месяц = &Месяц
		|	И инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	инкТабельУчетаРабочегоВремени.Сотрудник";
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник","Истина");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	тзТабель = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрТабель из тзТабель Цикл
		
		стрПоиск = Новый Структура("Сотрудник",стрТабель.Сотрудник);
		СотрудникиМассив = Объект.Ведомость.НайтиСтроки(стрПоиск);
		Для каждого стрТЧ из СотрудникиМассив Цикл
			стрТЧ.Дни		= стрТабель.ВДнях;
			стрТЧ.ДниФакт   = стрТабель.ВДнях;
			стрТЧ.Часы      = стрТабель.ВЧасах;
			стрТЧ.ЧасыФакт  = стрТабель.ВЧасах;
		КонецЦикла;
		
	КонецЦикла;
	           	
КонецПроцедуры

&НаКлиенте
Процедура ТабельВставитьДанныеОдному(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабельВставитьДанныеВсемНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельВставитьДанныеВсем(Команда)
	ТабельВставитьДанныеВсемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаДниЧасыПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСписком(Команда)
	
	ВопросЗаполнитьСпискомТЧСотрудники();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСпискомТЧВедомостьЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	
		ИмяПоля = ДопПараметры.ИмяПоля;     
		ЗначениеПоля = ДопПараметры.ЗначениеПоля;
		
		КолВо = Объект.Ведомость.Количество()-1;
		СчЦикла = 0;
		Для СчЦикла = 0 По КолВо Цикл
			Объект.Ведомость[СчЦикла][ИмяПоля] = ЗначениеПоля;
		КонецЦикла;
		
		ПересчитатьСотрудниковНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСпискомТЧСотрудники()
	
	ИмяПоляВедомость 		= Элементы.Ведомость.ТекущийЭлемент.Имя;
	
	Если (ИмяПоляВедомость = "ВедомостьОклад") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьДни") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьДниФакт") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьЧасы") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьЧасыФакт")
	Тогда
	
		ИмяПоля = СтрЗаменить(ИмяПоляВедомость,"Ведомость","");
		ЗначениеПоля = Элементы.Ведомость.ТекущиеДанные[ИмяПоля];

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяПоля",ИмяПоля);
		ДопПараметры.Вставить("ЗначениеПоля",ЗначениеПоля);
		
		ТекстВопроса = НСтр("ru = 'Ввести списком значение "+ЗначениеПоля+" для этого поля?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСпискомТЧВедомостьЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяПоляВедомость = "ВедомостьПрочиеНачисления" Тогда 	
		
		Оповещение = Новый ОписаниеОповещения("ВводСпискомНачисленийЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляВводаНачисленийУдержаний());
		
		ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаВводСпискомНачислений", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
	ИначеЕсли ИмяПоляВедомость = "ВедомостьПрочиеУдержания" Тогда 	
		
		Оповещение = Новый ОписаниеОповещения("ВводСпискомУдержанийЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляВводаНачисленийУдержаний());
		
		ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаВводСпискомУдержаний", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСпискомУдержанийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьВводСпискомУдержанийНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьВводСпискомУдержанийНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ПрочиеУдержанияСписком	= ПараметрыРасчета.мПрочиеУдержанияТаблица;
	
	Если ЗначениеЗаполнено(ПрочиеУдержанияСписком) Тогда
		
		Для каждого ПрочиеУдержанияСпискомСтрока Из ПрочиеУдержанияСписком Цикл
			
			ПрочиеУдержанияСтрока = Объект.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеУдержанияСтрока,ПрочиеУдержанияСпискомСтрока);
			
		КонецЦикла; 
		
		ПересчитатьСотрудниковНаСервере();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСпискомНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьВводСпискомНачисленийНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьВводСпискомНачисленийНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ПрочиеНачисленияСписком	= ПараметрыРасчета.мПрочиеНачисленияТаблица;
	
	Если ЗначениеЗаполнено(ПрочиеНачисленияСписком) Тогда
		
		Для каждого ПрочиеНачисленияСпискомСтрока Из ПрочиеНачисленияСписком Цикл
			
			ПрочиеНачисленияСтрока = Объект.ПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеНачисленияСтрока,ПрочиеНачисленияСпискомСтрока);
			
		КонецЦикла; 
		
		ПересчитатьСотрудниковНаСервере();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилищеДляВводаНачисленийУдержаний()
	
	СотрудникиМассив = Новый Массив;
	Для каждого ВедомостьСтрока Из Объект.Ведомость Цикл
		СотрудникиМассив.Добавить(ВедомостьСтрока.Сотрудник);	
	КонецЦикла; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СотрудникиМассив",СотрудникиМассив);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВедомостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Заголовок	= "Сотрудник" Тогда
		
		ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 

		СтандартнаяОбработка = Ложь;
		ОткрытьФормуАнкетныхДанныхНаКлиенте(ТекущиеДанные.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьНачисленийУдержаний(Команда)
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияФормы(); 
	ПолноеИмяФормыСтрока = "Обработка.инкВедомостьНачисленийУдержаний.Форма.ФормаВедомости";                   
	
 	ОткрытьФорму(ПолноеИмяФормыСтрока, 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры
	
&НаСервере
Функция ПолучитьПараметрыОткрытияФормы()
	
	ДанныеСтруктура = инкОтчетыСервер.ПолучитьСтруктуруДляВедомостиНачисленийУдержаний(Объект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", инкОбщийСервер.АдресПараметровВХранилище(ДанныеСтруктура,УникальныйИдентификатор));
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция АдресПараметровВХранилищеДляУдалениеВидов()
	
	НачисленияСоответствие = Новый Соответствие;
	Для каждого НачисленияСтрока Из Объект.ПрочиеНачисления Цикл
		НачисленияСоответствие.Вставить(НачисленияСтрока.Начисление,НачисленияСтрока.Начисление.Код);		
	КонецЦикла; 
	УдержанияСоответствие = Новый Соответствие;
	Для каждого УдержаниеСтрока Из Объект.ПрочиеУдержания Цикл
		УдержанияСоответствие.Вставить(УдержаниеСтрока.Удержание,УдержаниеСтрока.Удержание.Код);		
	КонецЦикла; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НачисленияСоответствие",НачисленияСоответствие);
	ПараметрыРасчета.Вставить("УдержанияСоответствие",УдержанияСоответствие);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УдалениеВидов(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляУдалениеВидов());

	Оповещение = Новый ОписаниеОповещения("УдалениеВидовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаУдалениеВидов", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УдалениеВидовЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		УдалениеВидовНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УдалениеВидовНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	
	ТабличнаяЧастьОбъекта = Объект.ПрочиеНачисления;
	ПоискСтрока = "Начисление";
	Если ПараметрыРасчета.ВыборНачисленийУдержаний = "Удержания" Тогда
		ТабличнаяЧастьОбъекта = Объект.ПрочиеУдержания;	
		ПоискСтрока = "Удержание";
	КонецЕсли; 
	
	ПоискНачисленийУдержаний = Новый Структура;
	ПоискНачисленийУдержаний.Вставить(ПоискСтрока);

	Для каждого НачисленияУдержанияСтрока Из ПараметрыРасчета.НачисленияУдержанияКУдалению Цикл
		
		ПоискНачисленийУдержаний[ПоискСтрока] = НачисленияУдержанияСтрока.НачислениеУдержание;
		ТабличнаяЧастьМассив = ТабличнаяЧастьОбъекта.НайтиСтроки(ПоискНачисленийУдержаний);			
		
		Для каждого ТабличнаяЧастьЭлемент Из ТабличнаяЧастьМассив Цикл
			ТабличнаяЧастьОбъекта.Удалить(ТабличнаяЧастьЭлемент);
		КонецЦикла; 
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере();	

КонецПроцедуры
 
&НаКлиенте
Процедура ПрочиеНачисления(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект);
	
	Сотрудник      = Элементы.Ведомость.ТекущиеДанные.Сотрудник;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыИСотрудникВХранилище(Сотрудник));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПрочиеНачисления", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСпециальныеНачисленияНаСервере(РезультатРедактирования);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	тзПрочиеНачисления	= ПараметрыРасчета.тзПрочиеНачисления;
	
	Для каждого стртзПрочиеНачисления из тзПрочиеНачисления Цикл

		Если стртзПрочиеНачисления.РазмерНачисления = 0 ИЛИ  
			 НЕ ЗначениеЗаполнено(стртзПрочиеНачисления.Начисление)	
		Тогда
			Продолжить;
		КонецЕсли; 
		
		стрПрочиеНачисления = Объект.ПрочиеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(стрПрочиеНачисления,стртзПрочиеНачисления);
		
	КонецЦикла;
	
	ПересчитатьСотрудниковНаСервере();
			
КонецПроцедуры	

&НаКлиенте
Процедура СпециальныеНачисленияЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьСпециальныеНачисленияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СпециальныеНачисления(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СпециальныеНачисленияЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыВХранилище());
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаСпециальныеНачисления", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	      	
КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеНачисленияУдержания(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Сотрудник = ТекущиеДанные.Сотрудник;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", СотрудникВХранилище(Сотрудник));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПрочиеНачисленияУдержания", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний(ВидНачисленияУдержания)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НачисленияУдержания",ВидНачисленияУдержания);
	
	Оповещение = Новый ОписаниеОповещения("ПостоянныеНачисленияУдержанияЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ВыборСпискаСотрудниковВХранилище("Выполнить "+НРег(ВидНачисленияУдержания)+" по выбранным сотрудникам?"));
	
	ОткрытьФорму("ОбщаяФорма.инкВыборСотрудниковСписком", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеНачисления(Команда)
	
	ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний("Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеУдержания(Команда)
	
	ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний("Удержания");
		
КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеНачисленияУдержанияЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьПрочиеНачисленияУдержанияНаСервере(РезультатРедактирования,ДополнительныеПараметры.НачисленияУдержания);
		                                    		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьПрочиеНачисленияУдержанияНаСервере(РезультатРедактирования,ВидНачисленийУдержаний);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПостоянныеНачисленияУдержания.Сотрудник КАК Сотрудник,
		|	инкПостоянныеНачисленияУдержания.НачислениеУдержание КАК Начисление,
		|	инкПостоянныеНачисленияУдержания.Размер КАК РазмерНачисления
		|ИЗ
		|	РегистрСведений.инкПостоянныеНачисленияУдержания КАК инкПостоянныеНачисленияУдержания
		|ГДЕ
		|	инкПостоянныеНачисленияУдержания.Сотрудник В(&СотрудникиМассив)
		|	И ТИПЗНАЧЕНИЯ(инкПостоянныеНачисленияУдержания.НачислениеУдержание) = ТИП(ПланВидовРасчета.инкНачисления)";
	
	Если ВидНачисленийУдержаний = "Удержания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПланВидовРасчета.инкНачисления","ПланВидовРасчета.инкУдержания");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КАК Начисление","КАК Удержание");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КАК РазмерНачисления","КАК РазмерУдержания");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СотрудникиМассив", ПараметрыРасчета.СотрудникиМассив);
	
	НачисленияУдержанияТаблица = Запрос.Выполнить().Выгрузить();
	Для каждого ТаблицаСтрока Из НачисленияУдержанияТаблица Цикл
		
		Если ВидНачисленийУдержаний = "Начисления" Тогда
			ПрочееНачисление = Объект.ПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееНачисление,ТаблицаСтрока);
		Иначе	
			ПрочееУдержание = Объект.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееУдержание,ТаблицаСтрока);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры	

#Область о // Норма времени из справочника:

&НаКлиенте
Процедура НормаВремениИзСправочника(Команда)

	ТекстВопроса = НСтр("ru = 'Заполнить норму времени?'");
	Оповещение = Новый ОписаниеОповещения("ВопросНормаВремениИзСправочникаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросНормаВремениИзСправочникаЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НормаВремениИзСправочникаНаСервере();		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НормаВремениИзСправочникаНаСервере()
	
	НаборЗаписейНормаВремени = РегистрыСведений.инкНормаВремени.СоздатьНаборЗаписей();
	НаборЗаписейНормаВремени.Отбор.Месяц.Установить(НачалоМесяца(Объект.МесяцНачисления));
	НаборЗаписейНормаВремени.Прочитать();

	Для каждого ЗаписьНорма Из НаборЗаписейНормаВремени Цикл
		
		Для каждого ВедомсотьСтрока Из Объект.Ведомость Цикл
			
			Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
				
				ВедомсотьСтрока.Дни = ЗаписьНорма.КалендраныхДней;
				ВедомсотьСтрока.НормаДни = ЗаписьНорма.РабочихДнейВМесяце;	
				
			Иначе   
				
				Часы			= ЗаписьНорма.НормаЧасовМужчиныПятидневка;
				НормаЧасы       = ЗаписьНорма.НормаЧасовМужчиныПятидневка;
				Если ВедомсотьСтрока.Сотрудник.Пол = Перечисления.инкПол.Женский Тогда
					Часы			= ЗаписьНорма.НормаЧасовЖенщиныПятидневка;	
					НормаЧасы       = ЗаписьНорма.НормаЧасовЖенщиныПятидневка;
				КонецЕсли;
				
				Если Объект.ВКалендарныхДнях Тогда
					ВедомсотьСтрока.Часы = Часы;			
					ВедомсотьСтрока.НормаЧасы = НормаЧасы;
				КонецЕсли;	
					
			КонецЕсли;

		КонецЦикла;	
		
	КонецЦикла;
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 