
#Область о // Служебные процедуры и функции:

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьФормуДаннымиПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуДаннымиПоУмолчанию()
	
	//Объект.ПутьКФайлу =  "d:\1С\!1С разработка 11.0\!Текущие задачи\!Загрузка внешних начислений\2020 10 27 - ошибки при загрузке\1C-2020_11_05-ORG-009-001-035150.XML";
	Объект.ПоказатьСостояниеПрогресса = Истина;
    Объект.ПроводитьДокументы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументы(Команда)
	
	Если Не ЗначениеЗаполнено(мАдресКФайлу) Тогда
		Возврат;
	КонецЕсли; 
	
	Отказ = Ложь;
	
	ПоказатьСостояниеПрогрессаНаКлиенте("Чтение данных XML...");
	ИсходныеДанные = ПолучитьИсходныеДанные();
	ЗагрузитьДанныеИзXMLНаКлиенте(ИсходныеДанные,мАдресКФайлу,Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ИсходныеДанные, Новый УникальныйИдентификатор);
	//
	ПоказатьСостояниеПрогрессаНаКлиенте("Запись данных XML...");
	ЗаписатьПолученныеXMLДанные(АдресВоВремХранилище,Отказ);
	ПоказатьСостояниеПрогрессаНаКлиенте("Формирование документов выплаты зарплаты...");
	ЗагрузитьДокументыНаСервере(АдресВоВремХранилище,Отказ);
	ЗагрузитьЛогиНаСервере(АдресВоВремХранилище);
	//
	УдалитьИзВременногоХранилища(АдресВоВремХранилище);
	ПоказатьСостояниеПрогрессаНаКлиенте("Загрузка завершена.");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеПрогрессаНаКлиенте(СостояниеТекст)
	
	Если Объект.ПоказатьСостояниеПрогресса Тогда
		Состояние(СостояниеТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Заголовок", "Укажите файл с данными: ");
	ПараметрыДиалога.Вставить("Фильтр", НСтр("ru = 'XML выгрузка из Инкомсофт: Зарплата и кадры 10.5 файлы (*.xml)'") + "|*.xml");
    
    ДопПараметры = Новый Структура;
    
	Оповещение = Новый ОписаниеОповещения("ОткрытьОкноВыбораФайлаНаКлиентеЗавершение", ЭтотОбъект, ДопПараметры);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, ПараметрыДиалога, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноВыбораФайлаНаКлиентеЗавершение(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресПомещенногоФайла = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки           = РезультатПомещенияФайлов.ОписаниеОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АдресПомещенногоФайла) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла настроек синхронизации данных на сервер'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	// Успешно передали файл, загружаем на сервере.
    ИмяФайла = РезультатПомещенияФайлов.Имя; 
	//ЧастиИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатПомещенияФайлов.Имя);
    
	мАдресКФайлу = АдресПомещенногоФайла;
	мФайл	     = ИмяФайла; 		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТекстВОтчет(ИсходныеДанные,Текст)
	
	ИсходныеДанные.Логи.Добавить(Строка(ТекущаяДата())+ ": " + Текст);
	
КонецПроцедуры                      

&НаСервереБезКонтекста
Процедура ДобавитьЭлементСправочникаВТаблицу(Таблица,Элемент)
	
	ТаблицаСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(ТаблицаСтрока,Элемент);
	
КонецПроцедуры                      

&НаСервереБезКонтекста
Функция ПоискВТаблицеПоСтруктуре(НайденныйЭлемент,Таблица,ПоискСтруктура,ПолеПоиска)
	
	ТаблицаМассив = Таблица.НайтиСтроки(ПоискСтруктура);
		
	Для каждого Элемент из ТаблицаМассив Цикл
		НайденныйЭлемент = Элемент[ПолеПоиска];
		Прервать;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЛогиНаСервере(АдресВоВремХранилище)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресВоВремХранилище);	

	Объект.Отчет.Очистить();
	Для каждого ЛогиСтрока из ИсходныеДанные.Логи Цикл
		СтрокаОтчет = Объект.Отчет.Добавить();
		СтрокаОтчет.СтрокаОтчета = ЛогиСтрока;
	КонецЦикла;
	
	Объект.СформированныеДокументы.Очистить();
	Для каждого ДокументСтрока из ИсходныеДанные.ДокументыНачисленияЗарплаты Цикл
		СтрокаОтчет = Объект.СформированныеДокументы.Добавить();
		СтрокаОтчет.Документ = ДокументСтрока;
        СтрокаОтчет.МесяцНачисления = ДокументСтрока.МесяцНачисления; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область о // Исходные данные:

&НаКлиенте
Функция ПолучитьИсходныеДанные()
	
	ИсходныеДанные = Новый Структура;
	//
	ЗаголовокФайлаXML = Новый Структура;
	ОрганизацияXML = Новый Структура;
	МассивПодразделенийXML = Новый Массив; 
	МассивСотрудниковXML = Новый Массив;
	МассивНачисленийXML = Новый Массив;
	МассивУдержанийXML = Новый Массив;
	МассивВедомостейXML = Новый Массив;
	ПриказыXML = Новый Структура;	
	//                     	
	ИсходныеДанные.Вставить("ЗаголовокФайлаXML",ЗаголовокФайлаXML);
	ИсходныеДанные.Вставить("ОрганизацияXML",ОрганизацияXML);
	ИсходныеДанные.Вставить("МассивПодразделенийXML",МассивПодразделенийXML);	
	ИсходныеДанные.Вставить("МассивСотрудниковXML",МассивСотрудниковXML);	
	ИсходныеДанные.Вставить("МассивНачисленийXML",МассивНачисленийXML);
	ИсходныеДанные.Вставить("МассивУдержанийXML",МассивУдержанийXML);	
	ИсходныеДанные.Вставить("МассивВедомостейXML",МассивВедомостейXML);	
	ИсходныеДанные.Вставить("ПриказыXML",ПриказыXML);	
	ИсходныеДанные.Вставить("Логи",Новый Массив);
	ИсходныеДанные.Вставить("ИдентификаторЗагрузки",Новый УникальныйИдентификатор);
    ИсходныеДанные.Вставить("ПроводитьДокументы",Объект.ПроводитьДокументы);
    //
	
	Возврат ИсходныеДанные;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьИсходныеДанныеДляЗаписиXML(ИсходныеДанные)
	
	ИсходныеДанные.Вставить("ОрганизацииТаблица",ПолучитьОрганизации()); 
	ИсходныеДанные.Вставить("СотрудникиТаблица",ПолучитьСотрудников()); 
	//
	ИсходныеДанные.Вставить("ПодразделенияТаблица",ПолучитьДанныеСправочника("инкПодразделения")); 
	ИсходныеДанные.Вставить("НачисленияТаблица",ПолучитьДанныеПлановВидовРасчета("инкНачисления")); 
	ИсходныеДанные.Вставить("УдержанияТаблица",ПолучитьДанныеПлановВидовРасчета("инкУдержания")); 
	ИсходныеДанные.Вставить("ДоходыНДФЛТаблица",ПолучитьДанныеСправочника("инкДоходНДФЛ")); 
	ИсходныеДанные.Вставить("ВычетыНДФЛТаблица",ПолучитьДанныеСправочника("инкВычетыНДФЛ")); 
	ИсходныеДанные.Вставить("ДолжностиТаблица",ПолучитьДанныеСправочника("инкДолжности")); 
	ИсходныеДанные.Вставить("СтраныМираТаблица",ПолучитьДанныеСправочника("СтраныМира")); 
	//
	ИсходныеДанные.Вставить("ПриемНаРаботуТаблица",ПолучитьДанныеКадровогоДокумента("инкПриемНаРаботу")); 
	ИсходныеДанные.Вставить("УвольнениеТаблица",ПолучитьДанныеКадровогоДокумента("инкУвольнение")); 
	ИсходныеДанные.Вставить("КадровыйПереводТаблица",ПолучитьДанныеКадровогоДокумента("инкКадровыйПеревод")); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКадровогоДокумента(ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкДокумент.Ссылка КАК Ссылка,
		|	инкДокумент.Организация КАК Организация,
		|	инкДокумент.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.инкДокумент КАК инкДокумент
		|ГДЕ
		|	инкДокумент.Проведен";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкДокумент",ИмяДокумента);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкОрганизации.Ссылка КАК Ссылка,
		|	инкОрганизации.Код КАК Код,
		|	инкОрганизации.Наименование КАК Наименование,
		|	инкОрганизации.ИНН КАК ИНН,
		|	инкОрганизации.КПП КАК КПП,
		|	инкОрганизации.Руководитель КАК Руководитель,
		|	инкОрганизации.Бухгалтер КАК Бухгалтер,
		|	инкОрганизации.Кадровик КАК Кадровик
		|ИЗ
		|	Справочник.инкОрганизации КАК инкОрганизации
		|ГДЕ
		|	НЕ инкОрганизации.ПометкаУдаления";
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПлановВидовРасчета(ИмяПлана)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачисления.Ссылка КАК Ссылка,
		|	инкНачисления.Код КАК Код,
		|	инкНачисления.Наименование КАК Наименование,
		|	инкНачисления.КодВСтаройПрограмме КАК КодВСтаройПрограмме
		|ИЗ
		|	ПланВидовРасчета.инкНачисления КАК инкНачисления
		|ГДЕ
		|	НЕ инкНачисления.ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкНачисления",ИмяПлана);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции
	    
&НаСервереБезКонтекста
Функция ПолучитьДанныеСправочника(ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСправочник.Ссылка КАК Ссылка,
		|	инкСправочник.Код КАК Код,
		|	инкСправочник.Наименование КАК Наименование
		|ИЗ
		|	Справочник.инкСправочник КАК инкСправочник
		|ГДЕ
		|	НЕ инкСправочник.ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкСправочник",ИмяСправочника);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСотрудники.Ссылка КАК Ссылка,                                    
		|	инкСотрудники.Наименование КАК Наименование,
		|	инкСотрудники.Фамилия КАК Фамилия,
		|	инкСотрудники.Имя КАК Имя,
		|	инкСотрудники.Отчество КАК Отчество,
		|	инкСотрудники.ТабельныйНомер КАК ТабельныйНомер,
		|	инкСотрудники.Организация КАК Организация,
		|	инкСотрудники.Подразделение КАК Подразделение,
		|	инкСотрудники.ИНН КАК ИНН,
		|	инкСотрудники.СНИЛС КАК СНИЛС
		|ИЗ
		|	Справочник.инкСотрудники КАК инкСотрудники
		|ГДЕ
		|	НЕ инкСотрудники.ПометкаУдаления";
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначений.Индексы.Добавить("Фамилия");
	ТаблицаЗначений.Индексы.Добавить("Имя");
	ТаблицаЗначений.Индексы.Добавить("Отчество");
	ТаблицаЗначений.Индексы.Добавить("Фамилия,Имя,Отчество");
	
	Возврат ТаблицаЗначений;
	
КонецФункции	

#КонецОбласти

#Область о // Чтение XML файла: 

&НаКлиенте 
Процедура ЗагрузитьДанныеИзXMLНаКлиенте(ИсходныеДанные,ПутьКФайлу,Отказ)

	ПрочитатьXMLФайл(ПутьКФайлу,ИсходныеДанные,Отказ);
	
	АктуальнаяВерсияФормата = "01.03";
	ТекстОшибки = "";
	
	Если Не ИсходныеДанные.Свойство("ЗаголовокФайлаXML") Тогда
		ТекстОшибки = "Ошибка. Не правильный формат файла XML.";
		инкОбщийКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
		
	Если ИсходныеДанные.ЗаголовокФайлаXML.ПрограммаПодготовкиДанных <> "Инкомсофт: Зарплата и кадры" Тогда
		ТекстОшибки = "Ошибка. Не правильный формат файла XML.";
		инкОбщийКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
		
	Если ИсходныеДанные.ЗаголовокФайлаXML.ВерсияФормата <> АктуальнаяВерсияФормата Тогда 
		ТекстОшибки = "Ошибка. Не правильная версия формата файла XML. Актуальная версия: "+АктуальнаяВерсияФормата+".";
		инкОбщийКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Отказ = Истина;
	КонецЕсли;		 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьXMLФайл(АдресКФайлуЗагрузки,ИсходныеДанные,Отказ)

	Если АдресКФайлуЗагрузки = "" Тогда
		Возврат;	
	КонецЕсли;
	
	ВремКаталог =  КаталогВременныхФайлов();
    ПутьКФайлу = ВремКаталог + Новый УникальныйИдентификатор() + ".xml";
    ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресКФайлуЗагрузки);
    ДвоичныеДанные.Записать(ПутьКФайлу);
	
	ЗаголовокФайлаXML      = ИсходныеДанные.ЗаголовокФайлаXML;
	ОрганизацияXML         = ИсходныеДанные.ОрганизацияXML;
	МассивНачисленийXML    = ИсходныеДанные.МассивНачисленийXML;
	МассивУдержанийXML     = ИсходныеДанные.МассивУдержанийXML;
	МассивСотрудниковXML   = ИсходныеДанные.МассивСотрудниковXML;
	МассивПодразделенийXML = ИсходныеДанные.МассивПодразделенийXML;
	МассивВедомостейXML    = ИсходныеДанные.МассивВедомостейXML;
	ПриказыXML             = ИсходныеДанные.ПриказыXML;	
	                                                
	ЧтениеСотрудника = Ложь;
	ЧтениеОрганизации = Ложь;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	Дом = Новый ПостроительDOM;
	ДокументДОМ = Дом.Прочитать(ЧтениеXML);

	Для каждого элБазаДанных из ДокументДОМ.ЭлементДокумента.ДочерниеУзлы Цикл
		
		// Заголовок файла:
		Если элБазаДанных.ИмяЭлемента = "ЗаголовокФайла" Тогда 
			Для каждого элЗаголовокФайла Из элБазаДанных.ДочерниеУзлы Цикл
				ЗаголовокФайлаXML.Вставить(элЗаголовокФайла.ИмяЭлемента,элЗаголовокФайла.ТекстовоеСодержимое);									
			КонецЦикла;		
		
		// Данные Организации:
		ИначеЕсли элБазаДанных.ИмяЭлемента = "ДанныеОрганизации" Тогда 
			Для каждого элДанныеОрганизации Из элБазаДанных.ДочерниеУзлы Цикл
				ОрганизацияXML.Вставить(элДанныеОрганизации.ИмяЭлемента,элДанныеОрганизации.ТекстовоеСодержимое);									
			КонецЦикла;	
			
		// Подразделения:	
		ИначеЕсли элБазаДанных.ИмяЭлемента = "Подразделения" Тогда 	
			Для каждого элПодразделение Из элБазаДанных.ДочерниеУзлы Цикл
				ПодразделениеXML = Новый Структура;
				Для каждого ДанныеПодразделения Из элПодразделение.ДочерниеУзлы Цикл
					ПодразделениеXML.Вставить(ДанныеПодразделения.ИмяЭлемента,ДанныеПодразделения.ТекстовоеСодержимое);	
				КонецЦикла;
				МассивПодразделенийXML.Добавить(ПодразделениеXML);
			КонецЦикла;			
			
		// Прочие Начисления:
		ИначеЕсли элБазаДанных.ИмяЭлемента = "ПрочиеНачисления" Тогда
			МассивНачисленийXML.Очистить();
			Для каждого элНачисление Из элБазаДанных.ДочерниеУзлы Цикл
				
				НачислениеXML = Новый Структура;
				Для каждого элДанныеНачисления Из элНачисление.ДочерниеУзлы Цикл
					НачислениеXML.Вставить(элДанныеНачисления.ИмяЭлемента,элДанныеНачисления.ТекстовоеСодержимое);							
				КонецЦикла;
				МассивНачисленийXML.Добавить(НачислениеXML);
				
			КонецЦикла;
			
		// Прочие Удержания:
		ИначеЕсли элБазаДанных.ИмяЭлемента = "ПрочиеУдержания" Тогда
			МассивУдержанийXML.Очистить();
			Для каждого элУдержание Из элБазаДанных.ДочерниеУзлы Цикл
				
				УдержаниеXML = Новый Структура;
				Для каждого элДанныеУдержания Из элУдержание.ДочерниеУзлы Цикл
					УдержаниеXML.Вставить(элДанныеУдержания.ИмяЭлемента,элДанныеУдержания.ТекстовоеСодержимое);							
				КонецЦикла;
				МассивУдержанийXML.Добавить(УдержаниеXML);
				
			КонецЦикла; 			
			
		// Данные Сотрудников:
		ИначеЕсли элБазаДанных.ИмяЭлемента = "ДанныеСотрудников" Тогда
			
			МассивСотрудниковXML.Очистить();
			Для каждого элСотрудник Из элБазаДанных.ДочерниеУзлы Цикл
				
				СотрудникXML = Новый Структура;				
				мСтВычеты = Новый Массив;
				мСтВычеты.Очистить();
				
				Для каждого элДанныеСотрудника Из элСотрудник.ДочерниеУзлы Цикл
					// Резидент 
					Если элДанныеСотрудника.ИмяЭлемента = "Резидент" Тогда
						элРезидент = Новый Структура;
						Для каждого элДанныеРезидента Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элРезидент.Вставить(элДанныеРезидента.ИмяЭлемента,элДанныеРезидента.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("Статус",элРезидент);
					// Инвалид 	
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "Инвалид" Тогда  	
						элИнвалид = Новый Структура;
						Для каждого элДанныеИнвалида Из элДанныеСотрудника.ДочерниеУзлы Цикл							
							Если элДанныеИнвалида.ИмяЭлемента = "СправкаОбИнвалидности" Тогда
								элСправкаОбИнвалидности = Новый Структура;
								Для каждого элСправкаОбИнвалидностиДанные Из элДанныеИнвалида.ДочерниеУзлы Цикл
									элСправкаОбИнвалидности.Вставить(элСправкаОбИнвалидностиДанные.ИмяЭлемента,элСправкаОбИнвалидностиДанные.ТекстовоеСодержимое);	
								КонецЦикла;			
								элИнвалид.Вставить(элДанныеИнвалида.ИмяЭлемента,элСправкаОбИнвалидности);
							Иначе
								элИнвалид.Вставить(элДанныеИнвалида.ИмяЭлемента,элДанныеИнвалида.ТекстовоеСодержимое);
							КонецЕсли;
						КонецЦикла;
						СотрудникXML.Вставить("Инвалид",элИнвалид);							
					// ДоходСПредМестаРаботы 	
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "ДоходСПредМестаРаботы" Тогда  	
						элДоход = Новый Структура;
						Для каждого элДанныеДохода Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элДоход.Вставить(элДанныеДохода.ИмяЭлемента,элДанныеДохода.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("Доход",элДоход);							
					// ДокументУдостоверяющийЛичность
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "ДокументУдостоверяющийЛичность" Тогда  	
						элДокумент = Новый Структура;
						Для каждого элДанныеДокумента Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элДокумент.Вставить(элДанныеДокумента.ИмяЭлемента,элДанныеДокумента.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("Документ",элДокумент);	
					// АдресПоПрописке
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "АдресПоПрописке" Тогда  	
						элАдрес = Новый Структура;
						Для каждого элДанныеАдреса Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элАдрес.Вставить(элДанныеАдреса.ИмяЭлемента,элДанныеАдреса.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("АдресПоПрописке",элАдрес);	
					// АдресМестаПроживания
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "АдресМестаПроживания" Тогда  	
						элАдрес = Новый Структура;
						Для каждого элДанныеАдреса Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элАдрес.Вставить(элДанныеАдреса.ИмяЭлемента,элДанныеАдреса.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("АдресМестаПроживания",элАдрес);						
					// МестоРождения	
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "МестоРождения" Тогда  	
						элАдрес = Новый Структура;
						Для каждого элДанныеАдреса Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элАдрес.Вставить(элДанныеАдреса.ИмяЭлемента,элДанныеАдреса.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("МестоРождения",элАдрес);												
					// ИмущественныйВычет
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "ИмущественныйВычет" Тогда  	
						элИмущественныйВычет = Новый Структура;
						Для каждого элИВДанные Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элИмущественныйВычет.Вставить(элИВДанные.ИмяЭлемента,элИВДанные.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("ИмущественныйВычет",элИмущественныйВычет);	
					// СтандартныеВычеты	
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "СтандартныеВычеты" Тогда  	
						
						Для каждого элСтВычет Из элДанныеСотрудника.ДочерниеУзлы Цикл
							
							элСтВычеты = Новый Структура;
							Для каждого элДанные Из элСтВычет.ДочерниеУзлы Цикл
								элСтВычеты.Вставить(элДанные.ИмяЭлемента,элДанные.ТекстовоеСодержимое);		
							КонецЦикла;
							Если элСтВычеты.Количество() > 0 Тогда
								мСтВычеты.Добавить(элСтВычеты);	
							КонецЕсли;

						КонецЦикла;
					// ДоходСПредыдущегоМестаРаботы						
					ИначеЕсли элДанныеСотрудника.ИмяЭлемента = "ДоходСПредыдущегоМестаРаботы" Тогда  	
						элДоходСПредыдущегоМестаРаботы = Новый Структура;
						Для каждого элДанные Из элДанныеСотрудника.ДочерниеУзлы Цикл
							элДоходСПредыдущегоМестаРаботы.Вставить(элДанные.ИмяЭлемента,элДанные.ТекстовоеСодержимое);	
						КонецЦикла;
						СотрудникXML.Вставить("ДоходСПредыдущегоМестаРаботы",элДоходСПредыдущегоМестаРаботы);						
					Иначе 
						СотрудникXML.Вставить(элДанныеСотрудника.ИмяЭлемента,элДанныеСотрудника.ТекстовоеСодержимое);
					КонецЕсли;							
				КонецЦикла;				
				
				СотрудникXML.Вставить("СтандартныеВычетыМассив",мСтВычеты);
				МассивСотрудниковXML.Добавить(СотрудникXML);			
			КонецЦикла;
			
		// Ведомости:
		ИначеЕсли элБазаДанных.ИмяЭлемента = "Ведомости" Тогда
			МассивВедомостейXML.Очистить();
			Для каждого элВедомость Из элБазаДанных.ДочерниеУзлы Цикл
				
				элДанныеВедомостиXML = Новый Структура;
				Для каждого элАтрибут Из элВедомость.Атрибуты Цикл
					элДанныеВедомостиXML.Вставить(элАтрибут.ИмяУзла,элАтрибут.ЗначениеУзла);						
				КонецЦикла; 
				
				// Начисления и удержания:
				мНачисленийВедомости = Новый Массив;
				мУдержанийВедомости = Новый Массив;
				Для каждого элНачисленияИУдержания Из элВедомость.ДочерниеУзлы Цикл
					
					// Начисления:
					Если элНачисленияИУдержания.ИмяЭлемента = "Начисления"  Тогда
						Для каждого элНачислениеВедомостиXML Из элНачисленияИУдержания.ДочерниеУзлы Цикл
							стрДанныеНачисления = Новый Структура;
							Для каждого элДанныеНачисления Из элНачислениеВедомостиXML.ДочерниеУзлы Цикл
								стрДанныеНачисления.Вставить(элДанныеНачисления.ИмяЭлемента,элДанныеНачисления.ТекстовоеСодержимое);	
							КонецЦикла; 
							мНачисленийВедомости.Добавить(стрДанныеНачисления);
						КонецЦикла; 
					
					// Удержания:
					ИначеЕсли элНачисленияИУдержания.ИмяЭлемента = "Удержания"  Тогда
						Для каждого элУдержаниеВедомостиXML Из элНачисленияИУдержания.ДочерниеУзлы Цикл
							стрУдержанийВедомости = Новый Структура;
							Для каждого элДанныеУдержания Из элУдержаниеВедомостиXML.ДочерниеУзлы Цикл
								стрУдержанийВедомости.Вставить(элДанныеУдержания.ИмяЭлемента,элДанныеУдержания.ТекстовоеСодержимое);	
							КонецЦикла; 
							мУдержанийВедомости.Добавить(стрУдержанийВедомости);
						КонецЦикла;
						
					КонецЕсли;
					                           						
				КонецЦикла; // Начисления и удержания. 
				
				элМассиваВедомостей = Новый Структура;
				элМассиваВедомостей.Вставить("ДанныеВедомости",элДанныеВедомостиXML);
				элМассиваВедомостей.Вставить("НачисленияВедомости",мНачисленийВедомости);				
				элМассиваВедомостей.Вставить("УдержанияВедомости",мУдержанийВедомости);				
				МассивВедомостейXML.Добавить(элМассиваВедомостей);			

			КонецЦикла; 
			
		// 	Кадровые приказы:	
	    ИначеЕсли элБазаДанных.ИмяЭлемента = "Приказы" Тогда
   			//		
			мПриказыОПриемеНаРаботу = Новый Массив;
			мПриказыОбУвольнении = Новый Массив;
			мПриказыОКадровыхИзменениях = Новый Массив;
			//
			Для каждого элПриказы Из элБазаДанных.ДочерниеУзлы Цикл
				Если элПриказы.ИмяЭлемента = "ПриказыОПриемеНаРаботу" Тогда
					Для каждого элПриказ Из элПриказы.ДочерниеУзлы Цикл
						стрДанныеПриказа = Новый Структура;
						Для каждого элДанныеПриказа Из элПриказ.ДочерниеУзлы Цикл
							стрДанныеПриказа.Вставить(элДанныеПриказа.ИмяЭлемента,элДанныеПриказа.ТекстовоеСодержимое);	
						КонецЦикла; 
						мПриказыОПриемеНаРаботу.Добавить(стрДанныеПриказа);
					КонецЦикла;					
				ИначеЕсли элПриказы.ИмяЭлемента = "ПриказыОбУвольнении" Тогда	
					Для каждого элПриказ Из элПриказы.ДочерниеУзлы Цикл
						стрДанныеПриказа = Новый Структура;
						Для каждого элДанныеПриказа Из элПриказ.ДочерниеУзлы Цикл
							стрДанныеПриказа.Вставить(элДанныеПриказа.ИмяЭлемента,элДанныеПриказа.ТекстовоеСодержимое);	
						КонецЦикла; 
						мПриказыОбУвольнении.Добавить(стрДанныеПриказа);
					КонецЦикла;					
				ИначеЕсли элПриказы.ИмяЭлемента = "ПриказыОКадровыхИзменениях" Тогда 
					Для каждого элПриказ Из элПриказы.ДочерниеУзлы Цикл
						стрДанныеПриказа = Новый Структура;
						Для каждого элДанныеПриказа Из элПриказ.ДочерниеУзлы Цикл
							стрДанныеПриказа.Вставить(элДанныеПриказа.ИмяЭлемента,элДанныеПриказа.ТекстовоеСодержимое);	
						КонецЦикла; 
						мПриказыОКадровыхИзменениях.Добавить(стрДанныеПриказа);
					КонецЦикла;					
				КонецЕсли;				
			КонецЦикла;
			
			ПриказыXML.Вставить("мПриказыОПриемеНаРаботу",мПриказыОПриемеНаРаботу);
			ПриказыXML.Вставить("мПриказыОбУвольнении",мПриказыОбУвольнении);
			ПриказыXML.Вставить("мПриказыОКадровыхИзменениях",мПриказыОКадровыхИзменениях);		
			
		КонецЕсли;      
		
	КонецЦикла; 	

КонецПроцедуры

#КонецОбласти

#Область о // Запись полученных данных XML данных: 

&НаСервереБезКонтекста
Процедура ЗаписатьПолученныеXMLДанные(АдресВоВремХранилище,Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();

    Попытка
		ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресВоВремХранилище);	
		
		ЗагрузитьИсходныеДанныеДляЗаписиXML(ИсходныеДанные);
			
		МассивНачисленийXML = ИсходныеДанные.МассивНачисленийXML;		
		МассивСотрудниковXML = ИсходныеДанные.МассивСотрудниковXML;
		МассивПодразделенийXML = ИсходныеДанные.МассивПодразделенийXML;
		МассивУдержанийXML = ИсходныеДанные.МассивУдержанийXML;
		
		ЗаписатьОрганизацию(ИсходныеДанные);
		ЗаписатьПодразделения(ИсходныеДанные);	
		ЗаписатьНачисления(ИсходныеДанные);
		ОбработкаНачисленийВПроцентах(ИсходныеДанные);
		
		ЗаписатьУдержания(ИсходныеДанные);	
		ЗаписатьСотрудников(ИсходныеДанные);
		ОбработкаМассиваВедомостей(ИсходныеДанные);
		ОбработкаМассиваНачислений(ИсходныеДанные);
		ОбработкаМассиваУдержаний(ИсходныеДанные);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Отказ = Истина;
        ОтменитьТранзакцию();
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Ошибка при записи данных XML в базу. Описание ошибки: "+ОписаниеОшибки());
    КонецПопытки;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ОбработкаМассиваНачислений(ИсходныеДанные)
	
	// В массив начислений записываем ссылки на сотрудников, подразделения и начисления.

	МассивПодразделенийXML = ИсходныеДанные.МассивПодразделенийXML; 
	МассивСотрудниковXML = ИсходныеДанные.МассивСотрудниковXML;
	МассивНачисленийXML = ИсходныеДанные.МассивНачисленийXML;
	МассивУдержанийXML = ИсходныеДанные.МассивУдержанийXML;
	МассивВедомостейXML = ИсходныеДанные.МассивВедомостейXML;
	ВычетыНДФЛТаблица = ИсходныеДанные.ВычетыНДФЛТаблица;
	
	Для каждого ВедомостьСтрока Из МассивВедомостейXML Цикл
		
		// Начисления:
		мНачисленияВедомости = ВедомостьСтрока.НачисленияВедомости;
		Для каждого элНачислениеВедомости Из мНачисленияВедомости Цикл
            
			// Сотрудник:
			Для каждого элСотрудник Из МассивСотрудниковXML Цикл
				Если элНачислениеВедомости.СотрудникКод = элСотрудник.СотрудникКод Тогда
					элНачислениеВедомости.Вставить("СотрудникСсылка",элСотрудник.СотрудникСсылка);
					Прервать;				
				КонецЕсли;				
			КонецЦикла;      
			
			// Подразделение:		
			Для каждого элПодразделение Из МассивПодразделенийXML  Цикл
				Если элНачислениеВедомости.ПодразделениеКод = элПодразделение.Код Тогда
					элНачислениеВедомости.Вставить("ПодразделениеСсылка",элПодразделение.ПодразделениеСсылка);
					Прервать;				
				КонецЕсли; 	
			КонецЦикла; 
			
			// Начисление:		
			Для каждого элНачисление Из МассивНачисленийXML  Цикл
                Если элНачислениеВедомости.НачислениеКод = элНачисление.КодРасчета Тогда
                    
                    Если элНачисление.ЭтоУдержание Тогда
                        элНачислениеВедомости.Вставить("УдержаниеСсылка",элНачисление.УдержаниеСсылка);
                    Иначе
                        элНачислениеВедомости.Вставить("НачислениеСсылка",элНачисление.НачислениеСсылка);    
                    КонецЕсли;
					
					Прервать;
                    
				КонецЕсли; 					
			КонецЦикла; 
			
			// Вычет НДФЛ:		
			Для каждого элВычетНДФЛ Из ВычетыНДФЛТаблица Цикл
				Если элНачислениеВедомости.ВычетКод = элВычетНДФЛ.Код Тогда
					элНачислениеВедомости.Вставить("ВычетКодСсылка",элВычетНДФЛ.Ссылка);					
					Прервать;				
				КонецЕсли; 	
			КонецЦикла; 

		КонецЦикла; 

		// Удержания:
		мУдержанияВедомости = ВедомостьСтрока.УдержанияВедомости;
		Для каждого элУдержаниеВедомости Из мУдержанияВедомости Цикл
			
			// Сотрудник:
			Для каждого элСотрудник Из МассивСотрудниковXML Цикл
				Если элУдержаниеВедомости.СотрудникКод = элСотрудник.СотрудникКод Тогда
					элУдержаниеВедомости.Вставить("СотрудникСсылка",элСотрудник.СотрудникСсылка);
					элУдержаниеВедомости.Вставить("ПодразделениеСсылка",элСотрудник.СотрудникСсылка.Подразделение);		
					Прервать;				
				КонецЕсли;				
			КонецЦикла;      
			
			// Удержание:		
			Для каждого элУдержание Из МассивУдержанийXML  Цикл
				Если элУдержаниеВедомости.УдержаниеКод = элУдержание.КодРасчета Тогда
					элУдержаниеВедомости.Вставить("УдержаниеСсылка",элУдержание.УдержаниеСсылка);
					Прервать;				
				КонецЕсли; 					
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаМассиваУдержаний(ИсходныеДанные)
	
	// В массив удержаний записываем ссылки на сотрудников и удержания.

	МассивСотрудниковXML = ИсходныеДанные.МассивСотрудниковXML;
	МассивУдержанийXML = ИсходныеДанные.МассивУдержанийXML;
	МассивВедомостейXML = ИсходныеДанные.МассивВедомостейXML;
	
	Для каждого ВедомостьСтрока Из МассивВедомостейXML Цикл		
		мУдержанийВедомости = ВедомостьСтрока.УдержанияВедомости;
		Для каждого элУдержаниеВедомости Из мУдержанийВедомости Цикл
			// Сотрудник:
			Для каждого элСотрудник Из МассивСотрудниковXML Цикл
				Если элУдержаниеВедомости.СотрудникКод = элСотрудник.СотрудникКод Тогда
					элУдержаниеВедомости.Вставить("СотрудникСсылка",элСотрудник.СотрудникСсылка);
					элУдержаниеВедомости.Вставить("ПодразделениеСсылка",элСотрудник.ПодразделениеСсылка);
					Прервать;				
				КонецЕсли;				
			КонецЦикла;      
			
			// Удержание:		
			Для каждого элУдержание Из МассивУдержанийXML  Цикл
				Если элУдержаниеВедомости.УдержаниеКод = элУдержание.КодРасчета Тогда
					элУдержаниеВедомости.Вставить("УдержаниеСсылка",элУдержание.УдержаниеСсылка);
					Прервать;				
				КонецЕсли; 					
			КонецЦикла;			
		КонецЦикла;    
	КонецЦикла; // ВедомостьСтрока  	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаМассиваВедомостей(ИсходныеДанные)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	МассивВедомостейXML = ИсходныеДанные.МассивВедомостейXML;	
	МассивПодразделенийXML = ИсходныеДанные.МассивПодразделенийXML;
	
	Для каждого ВедомостьСтрока Из МассивВедомостейXML Цикл
		элПодрВед = ВедомостьСтрока.ДанныеВедомости.Подразделение; 
		Если элПодрВед = "Всё предприятие" Тогда
			ВедомостьСтрока.ДанныеВедомости.Вставить("ПодразделениеСсылка",Справочники.инкПодразделения.ПустаяСсылка());	
		Иначе
			ВедомостьСтрока.ДанныеВедомости.Вставить("ПодразделениеСсылка",ПоискПодразделенияВМассиве(МассивПодразделенийXML,ВедомостьСтрока.ДанныеВедомости.Подразделение));			 			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСотрудников(ИсходныеДанные)
	
	ОрганизацияXML          = ИсходныеДанные.ОрганизацияXML;
	МассивСотрудниковXML    = ИсходныеДанные.МассивСотрудниковXML; 
	МассивПодразделенийXML  = ИсходныеДанные.МассивПодразделенийXML;
	ПриказыXML              = ИсходныеДанные.ПриказыXML;
	                      	
	Для каждого СотрудникXML Из МассивСотрудниковXML  Цикл
		
		ТекстВОтчет(ИсходныеДанные,
		            "Обновление данных по сотруднику "
		           +СотрудникXML.Фамилия+" "
				   +СотрудникXML.Имя+" "
				   +СотрудникXML.Отчество+" "	   
				   +":");
		
		// Сотрудник:
		ссСотрудник = ЗаписьДанныхСотрудника(ИсходныеДанные, СотрудникXML);
		СотрудникXML.Вставить("СотрудникСсылка",ссСотрудник);
		// Организация:
		СотрудникXML.Вставить("ОрганизацияСсылка",ОрганизацияXML.ОрганизацияСсылка);
		// Подразделение:
		ссПодразделение = ПоискПодразделенияВМассиве(МассивПодразделенийXML,СотрудникXML.ПодразделениеКод);		
		СотрудникXML.Вставить("ПодразделениеСсылка",ссПодразделение);
		// Должность:
		ссДолжность = ЗаписьДанныхДолжности(ИсходныеДанные,СотрудникXML.Должность); 					
		СотрудникXML.Вставить("ДолжностьСсылка",ссДолжность);
		
		// Запись адресной информации
		ЗаписатьАдреснуюИнформацию(ИсходныеДанные,СотрудникXML);
		
		// Запись данных в объект:
		СотрОбъект = ссСотрудник.ПолучитьОбъект();
		ЗаполнитьОсновныеРеквизитыСотрудника(ИсходныеДанные,СотрОбъект,СотрудникXML);
		ЗаполнитьДополнительныеРеквизитыСотрудника(ИсходныеДанные,СотрОбъект,СотрудникXML);
		СотрОбъект.Записать();
		
		// Документы:
		// Запись кадровых документов по сотруднику:
		ЗаписьКадровыхДокументовПоСотруднику(ИсходныеДанные, СотрудникXML);		
		
		ТекстВОтчет(ИсходныеДанные,
            "Обновление данных по сотруднику "
           +СотрудникXML.Фамилия+" "
		   +СотрудникXML.Имя+" "
		   +СотрудникXML.Отчество+" "	   
		   +" завершено.");

	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаСотрудникаНаНаличиеДок(СотрудникXML, ОрганизацияXML, ДокументыТаблица)
			
	ПоискСтруктура = Новый Структура;
	ПоискСтруктура.Вставить("Сотрудник",СотрудникXML.СотрудникСсылка);
	ПоискСтруктура.Вставить("Организация",ОрганизацияXML.ОрганизацияСсылка);
	
	ДокументыМассив = ДокументыТаблица.НайтиСтроки(ПоискСтруктура);
	
	Возврат (ДокументыМассив.Количество() <> 0);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьДокумент_ПриказОПриемеНаРаботу(ИсходныеДанные,СотрудникXML)
	
	СформироватьДокумент_ПриказОПриемеНаРаботуПоПриказам(ИсходныеДанные,СотрудникXML);
	СформироватьДокумент_ПриказОПриемеНаРаботуПоАнкетнымДанным(ИсходныеДанные,СотрудникXML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДокумент_ПриказОПриемеНаРаботуПоАнкетнымДанным(ИсходныеДанные,СотрудникXML)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	ПриемНаРаботуТаблица = ИсходныеДанные.ПриемНаРаботуТаблица; 	

	Если Не ПроверкаСотрудникаНаНаличиеДок(СотрудникXML, ОрганизацияXML, ПриемНаРаботуТаблица) Тогда
		
		ПриемНаРабДок = Документы.инкПриемНаРаботу.СоздатьДокумент();
		
		ДатаПриемаНаРаботу = НачалоГода(ТекущаяДата());
		Если ЗначениеЗаполнено(СотрудникXML.ДатаПриема) Тогда
			ДатаПриемаНаРаботу = ИзСтрокиВДату(СотрудникXML.ДатаПриема);
		КонецЕсли;
		ПриемНаРабДок.Дата            		= ДатаПриемаНаРаботу;
		ПриемНаРабДок.ДатаПриемаНаРаботу	= ДатаПриемаНаРаботу;
		//
		//ПриемНаРабДок.Номер           = элПриказОПриемеНаРаботу.НомерПриказа; 
		ПриемНаРабДок.Организация     = ОрганизацияXML.ОрганизацияСсылка;
		ПриемНаРабДок.Подразделение   = ПоискПодразделенияВМассиве(ИсходныеДанные.МассивПодразделенийXML,СотрудникXML.Подразделение);
		ПриемНаРабДок.Руководитель    = ОрганизацияXML.РуководительСсылка; 
		ПриемНаРабДок.Сотрудник       = СотрудникXML.СотрудникСсылка;
		ПриемНаРабДок.Должность       = ЗаписьДанныхДолжности(ИсходныеДанные,
		                                                      СотрудникXML.Должность);
		//
		ПриемНаРабДок.Комментарий     = "Создан автоматически обработкой: Загрузка внешних начислений (по анкетным данным сотрудника).";
		ПриемНаРабДок.ИдентификаторЗагрузки = ИсходныеДанные.ИдентификаторЗагрузки;
		
		// Данные по начислениям:
		ПриемНаРабДок.Оклад = Число(СотрудникXML.Оклад);
		ПриемНаРабДок.СевернаяНадбавка = СотрудникXML.СотрудникСсылка.СевернаяНадбавка;
		ПриемНаРабДок.РайонныйКоэффициент = СотрудникXML.СотрудникСсылка.РайонныйКоэффициент;
		//
		ПриемНаРабДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		ДобавитьЭлементСправочникаВТаблицу(ПриемНаРаботуТаблица,ПриемНаРабДок);
		//
		ТекстВОтчет(ИсходныеДанные,"		- создан документ Прием на работу.");
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДокумент_ПриказОПриемеНаРаботуПоПриказам(ИсходныеДанные,СотрудникXML)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	мПриказыОПриемеНаРаботу = ИсходныеДанные.ПриказыXML.мПриказыОПриемеНаРаботу;
	ПриемНаРаботуТаблица = ИсходныеДанные.ПриемНаРаботуТаблица; 	
	
	Для каждого элПриказОПриемеНаРаботу из мПриказыОПриемеНаРаботу Цикл
		
		Если элПриказОПриемеНаРаботу.НомерСотрудника = СотрудникXML.СотрудникКод Тогда
			
			Если Не ПроверкаСотрудникаНаНаличиеДок(СотрудникXML, ОрганизацияXML, ПриемНаРаботуТаблица) Тогда
				
				ПриемНаРабДок = Документы.инкПриемНаРаботу.СоздатьДокумент();
				//
				элДата = ИзСтрокиВДату(элПриказОПриемеНаРаботу.ДатаПриказа); 
				ПриемНаРабДок.Дата            = элДата;
				//
				//ПриемНаРабДок.Номер           = элПриказОПриемеНаРаботу.НомерПриказа; 
				ПриемНаРабДок.Организация     = ОрганизацияXML.ОрганизацияСсылка;
				ПриемНаРабДок.Подразделение   = ПоискПодразделенияВМассиве(ИсходныеДанные.МассивПодразделенийXML,элПриказОПриемеНаРаботу.Подразделение);
				ПриемНаРабДок.Руководитель    = ОрганизацияXML.РуководительСсылка; 
				ПриемНаРабДок.Сотрудник       = СотрудникXML.СотрудникСсылка;
				ПриемНаРабДок.Должность       = ЗаписьДанныхДолжности(ИсходныеДанные,
				                                                      элПриказОПриемеНаРаботу.Должность);
				//
				элДата = ИзСтрокиВДату(элПриказОПриемеНаРаботу.ПринятьНаРаботуС); 
				ПриемНаРабДок.ДатаПриемаНаРаботу = элДата;
				//
				ПриемНаРабДок.Комментарий     = "Создан автоматически обработкой: Загрузка внешних начислений (по приказам).";
				ПриемНаРабДок.ИдентификаторЗагрузки = ИсходныеДанные.ИдентификаторЗагрузки;
				
				// Данные по начислениям:
				ПриемНаРабДок.ПлановыеНачисления.Очистить();
				ПриемНаРабДок.Оклад = Число(элПриказОПриемеНаРаботу.Оклад);
				ПриемНаРабДок.РайонныйКоэффициент = Число(элПриказОПриемеНаРаботу.РайонныйКоэффициент);
				ПриемНаРабДок.СевернаяНадбавка = Число(элПриказОПриемеНаРаботу.ПроцентКадровойНадбавки);
				
				//
				ПриемНаРабДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				ДобавитьЭлементСправочникаВТаблицу(ПриемНаРаботуТаблица,ПриемНаРабДок);
				//
				ТекстВОтчет(ИсходныеДанные,"		- создан документ Прием на работу.");
				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДокумент_ПриказОбУвольнении(ИсходныеДанные,СотрудникXML)
	
	СформироватьДокумент_ПриказОбУвольненииПоПриказам(ИсходныеДанные,СотрудникXML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДокумент_ПриказОбУвольненииПоПриказам(ИсходныеДанные,СотрудникXML);
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	мПриказыОбУвольнении = ИсходныеДанные.ПриказыXML.мПриказыОбУвольнении;
	УвольнениеТаблица = ИсходныеДанные.УвольнениеТаблица; 	
	
	// Приказы об увльнении:
	Для каждого элПриказОбУвольнении из мПриказыОбУвольнении Цикл
		Если элПриказОбУвольнении.НомерСотрудника = СотрудникXML.СотрудникКод Тогда
			Если Не ПроверкаСотрудникаНаНаличиеДок(СотрудникXML, ОрганизацияXML, УвольнениеТаблица) Тогда
				
				УвольнениеДок = Документы.инкУвольнение.СоздатьДокумент();
				УвольнениеДок.Организация     = ОрганизацияXML.ОрганизацияСсылка;
				УвольнениеДок.Подразделение   = СотрудникXML.СотрудникСсылка.Подразделение;
				УвольнениеДок.Должность   	  = СотрудникXML.СотрудникСсылка.Должность;

				//
				УвольнениеДок.Номер           = элПриказОбУвольнении.НомерПриказа;
				//
				элДата = ИзСтрокиВДату(элПриказОбУвольнении.ДатаПриказа); 
				УвольнениеДок.Дата            = элДата;
				//
				элДата = ИзСтрокиВДату(элПриказОбУвольнении.ДатаУвольнения); 
				УвольнениеДок.ДатаУвольнения  = элДата;
				//     				
				УвольнениеДок.Сотрудник       = СотрудникXML.СотрудникСсылка;
				УвольнениеДок.ОснованиеУвольнения = элПриказОбУвольнении.ОснованиеПриказа; 
				УвольнениеДок.Комментарий     = "Создан автоматически обработкой: Загрузка внешних начислений.";
				//								
				УвольнениеДок.Руководитель          = ОрганизацияXML.РуководительСсылка;
				УвольнениеДок.ИдентификаторЗагрузки = ИсходныеДанные.ИдентификаторЗагрузки;
				//
				УвольнениеДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				ДобавитьЭлементСправочникаВТаблицу(УвольнениеТаблица,УвольнениеДок);
				//
				ТекстВОтчет(ИсходныеДанные,"		- создан документ Увольнение.");
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла; 
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура СформироватьДокумент_КадровыйПеревод(ИсходныеДанные,СотрудникXML)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	мПриказыОКадровыхИзменениях = ИсходныеДанные.ПриказыXML.мПриказыОКадровыхИзменениях;
	КадровыйПереводТаблица = ИсходныеДанные.КадровыйПереводТаблица; 	
	
	// Приказы О Кадровых Изменениях:
	Для каждого элПриказыОКадровыхИзменениях из мПриказыОКадровыхИзменениях Цикл
		Если элПриказыОКадровыхИзменениях.НомерСотрудника = СотрудникXML.СотрудникКод Тогда
			Если Не ПроверкаСотрудникаНаНаличиеДок(СотрудникXML, ОрганизацияXML, КадровыйПереводТаблица) Тогда
				
				КадровыйПереводДок = Документы.инкКадровыйПеревод.СоздатьДокумент();
				//
				КадровыйПереводДок.Номер           = элПриказыОКадровыхИзменениях.НомерПриказа;
				//
				КадровыйПереводДок.Организация     = ОрганизацияXML.ОрганизацияСсылка;
				КадровыйПереводДок.Сотрудник       = СотрудникXML.СотрудникСсылка;
				//
				КадровыйПереводДок.Дата = ИзСтрокиВДату(элПриказыОКадровыхИзменениях.ДатаПриказа);
                //
				КадровыйПереводДок.ДатаПриказа = ИзСтрокиВДату(элПриказыОКадровыхИзменениях.ДействияПрикза);
				//	Перевод в другое подразделение:			
				КадровыйПереводДок.Подразделение = ПоискПодразделенияВМассиве(ИсходныеДанные.МассивПодразделенийXML,элПриказыОКадровыхИзменениях.Подразделение);
				КадровыйПереводДок.Должность = ЗаписьДанныхДолжности(ИсходныеДанные,элПриказыОКадровыхИзменениях.Должность);
				КадровыйПереводДок.ПричинаПеревода = элПриказыОКадровыхИзменениях.ПричинаПеревода;
				КадровыйПереводДок.ОснованиеПеревода = элПриказыОКадровыхИзменениях.Основание;	
				КадровыйПереводДок.ИдентификаторЗагрузки = ИсходныеДанные.ИдентификаторЗагрузки;
				//  Изменение начисления:
				элОклад = Число(элПриказыОКадровыхИзменениях.Оклад);
				элСН    = Число(элПриказыОКадровыхИзменениях.СН);
				Если (элОклад<>0) Или (элСН<>0) Тогда
					Если элОклад > 0 Тогда
						КадровыйПереводДок.Оклад = элОклад;					
					КонецЕсли;
					Если элСН > 0 Тогда
						КадровыйПереводДок.СевернаяНадбавка = элСН;					
					КонецЕсли;
				КонецЕсли;    				
				КадровыйПереводДок.Комментарий     = "Создан автоматически обработкой: Загрузка внешних начислений.";
				//
				//
				КадровыйПереводДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				ДобавитьЭлементСправочникаВТаблицу(КадровыйПереводТаблица,КадровыйПереводДок);
				//
				ТекстВОтчет(ИсходныеДанные,"		- создан документ Кадровый перевод.");
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьКадровыхДокументовПоСотруднику(ИсходныеДанные, СотрудникXML);		

	СформироватьДокумент_ПриказОПриемеНаРаботу(ИсходныеДанные,СотрудникXML);
	СформироватьДокумент_ПриказОбУвольнении(ИсходныеДанные,СотрудникXML);
	СформироватьДокумент_КадровыйПеревод(ИсходныеДанные,СотрудникXML);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаписатьАдреснуюИнформацию(ИсходныеДанные,СотрудникXML)
	
	стАдресПоПрописке = СотрудникXML.АдресПоПрописке;
	стАдресМестаПроживания = СотрудникXML.АдресМестаПроживания; 
	стМестоРождения = СотрудникXML.МестоРождения;
	
	обФизЛицо = СотрудникXML.СотрудникСсылка.ПолучитьОбъект();
	тчАдрИнф = обФизЛицо.КонтактнаяИнформация;
	тчАдрИнф.Очистить();
	ЗаписатьАдрИнф(Справочники.ВидыКонтактнойИнформации.МестоЖительстваРегистрация,стАдресПоПрописке,тчАдрИнф);
	ЗаписатьАдрИнф(Справочники.ВидыКонтактнойИнформации.МестоЖительстваФактически,стАдресПоПрописке,тчАдрИнф);
	обФизЛицо.Записать();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьАдрИнф(ВидКонтактнойИнформации, Адрес, тчАдрИнф)
	
	стрТЧ = тчАдрИнф.Добавить();
	стрТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	стрТЧ.Вид = ВидКонтактнойИнформации;
	Если Адрес.Страна="" Тогда
		стрТЧ.Страна = "РОССИЯ"; 
	Иначе
		стрТЧ.Страна = Адрес.Страна;
	КонецЕсли; 
	стрТЧ.Регион = Адрес.Регион;
	стрТЧ.Город  = Адрес.Город; //+ " " + НРег(Адрес.ГородКод);
	ПредставлениеТЧ = "";
	Если Адрес.Индекс<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + Адрес.Индекс + ", ";
	КонецЕсли;   
	Если Адрес.Регион<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + Адрес.Регион + ", ";
	КонецЕсли; 
	Если Адрес.Город<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + Адрес.Город + " " + НРег(Адрес.ГородКод) + ", ";		
	КонецЕсли; 
	Если Адрес.Улица<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + Адрес.Улица + " " + НРег(Адрес.УлицаКод) + ", ";		
	КонецЕсли; 
	Если Адрес.Дом<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + "дом № " + Адрес.Дом + ", ";
	КонецЕсли; 
	Если Адрес.Корпус<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + "корпус " + Адрес.Корпус + ", ";
	КонецЕсли; 
	Если Адрес.Квартира<>"" Тогда
		ПредставлениеТЧ = ПредставлениеТЧ + "квартира " + Адрес.Квартира + ", ";
	КонецЕсли;	
	ПредставлениеТЧ = Лев(ПредставлениеТЧ,СтрДлина(ПредставлениеТЧ)-2);
	стрТЧ.Представление = ПредставлениеТЧ; 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьДанныхДолжности(ИсходныеДанные,стрДолжность)
	
	ДолжностиТаблица = ИсходныеДанные.ДолжностиТаблица;
	ПоискСтруктура = Новый Структура("Наименование",стрДолжность);
	ДолжнСсылка = ПоискВТаблицеПоСтруктуре(Справочники.инкДолжности.ПустаяСсылка(),ДолжностиТаблица,ПоискСтруктура,"Ссылка");
	
	Если Не ЗначениеЗаполнено(ДолжнСсылка)  Тогда
		
		ПодрЭлем = Справочники.инкДолжности.СоздатьЭлемент();
		ПодрЭлем.Наименование = стрДолжность;
		ПодрЭлем.Записать();
		ДолжнСсылка = ПодрЭлем.Ссылка;		
		
		ДобавитьЭлементСправочникаВТаблицу(ДолжностиТаблица,ПодрЭлем);

	КонецЕсли; 
	
	Возврат ДолжнСсылка;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоискПодразделенияВМассиве(МассивПодразделенийXML, Код)
	
	// Поиск по коду:
	ссПодразделение = Справочники.инкПодразделения.ПустаяСсылка();
	Для каждого элПодразделение Из МассивПодразделенийXML Цикл
		Если элПодразделение.Код = Код Тогда
			ссПодразделение = элПодразделение.ПодразделениеСсылка;
			Прервать;			
		КонецЕсли;   		
	КонецЦикла; 
	
	// Попытка найти по наименованию:
	Если Не ЗначениеЗаполнено(ссПодразделение) Тогда
		
		Для каждого элПодразделение Из МассивПодразделенийXML Цикл
			Если элПодразделение.Имя = Код Тогда
				ссПодразделение = элПодразделение.ПодразделениеСсылка;
				Прервать;			
			КонецЕсли;   		
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ссПодразделение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписьДанныхСотрудника(ИсходныеДанные, СотрудникXML);
	
	СотрудникиТаблица	= ИсходныеДанные.СотрудникиТаблица;
	
	СотрСсылка = Справочники.инкСотрудники.ПустаяСсылка();
	
	// Поиск по табельному номеру:
	Если ЗначениеЗаполнено(СотрудникXML.СотрудникКод) Тогда
		ПоискСтруктура = Новый Структура("ТабельныйНомер",СотрудникXML.СотрудникКод);	
		СотрСсылка = ПоискВТаблицеПоСтруктуре(СотрСсылка,СотрудникиТаблица,ПоискСтруктура,"Ссылка");
	КонецЕсли;	
		
	// Поиск по ИНН:
	Если Не ЗначениеЗаполнено(СотрСсылка) И ЗначениеЗаполнено(СотрудникXML.ИНН) Тогда
		ПоискСтруктура = Новый Структура("ИНН",СотрудникXML.ИНН);	
		СотрСсылка = ПоискВТаблицеПоСтруктуре(СотрСсылка,СотрудникиТаблица,ПоискСтруктура,"Ссылка");
	КонецЕсли;
	
	// Поиск по СНИЛС:
	Если Не ЗначениеЗаполнено(СотрСсылка) И ЗначениеЗаполнено(СотрудникXML.СНИЛС) И (СотрудникXML.СНИЛС <> "   -   -      ") Тогда
		ПоискСтруктура = Новый Структура("СНИЛС",СотрудникXML.СНИЛС);	
		СотрСсылка = ПоискВТаблицеПоСтруктуре(СотрСсылка,СотрудникиТаблица,ПоискСтруктура,"Ссылка");
	КонецЕсли;
	
	// Поиск по ФИО:
	Если Не ЗначениеЗаполнено(СотрСсылка) Тогда
		ПоискСтруктура = Новый Структура;	
		ПоискСтруктура.Вставить("Фамилия");
		ПоискСтруктура.Вставить("Имя");
		ПоискСтруктура.Вставить("Отчество");
		
		ЗаполнитьЗначенияСвойств(ПоискСтруктура,СотрудникXML);
		СотрСсылка = ПоискВТаблицеПоСтруктуре(СотрСсылка,СотрудникиТаблица,ПоискСтруктура,"Ссылка");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СотрСсылка) Тогда		
		
		СотрЭлемент = Справочники.инкСотрудники.СоздатьЭлемент();
		
		СотрЭлемент.Записать();
		ДобавитьЭлементСправочникаВТаблицу(СотрудникиТаблица,СотрЭлемент);
		
		СотрСсылка = СотрЭлемент.Ссылка;				
		
		ТекстВОтчет(ИсходныеДанные,"		- добавлен в справочник сотрудники.");

	КонецЕсли; 
	
	Возврат СотрСсылка;
	
КонецФункции    

&НаСервереБезКонтекста
Процедура ЗаполнитьОсновныеРеквизитыСотрудника(ИсходныеДанные,СотрОбъект,СотрудникXML)

	ЗаполнитьЗначенияСвойств(СотрОбъект,СотрудникXML);
	
	СотрОбъект.Код = СотрудникXML.СотрудникКод; 
	СотрОбъект.ТабельныйНомер = СотрудникXML.СотрудникКод;
	СотрОбъект.Наименование = СотрудникXML.Фамилия+" "
	                        + СотрудникXML.Имя+" "
							+ СотрудникXML.Отчество;
	СотрОбъект.Организация 		= СотрудникXML.ОрганизацияСсылка;
	СотрОбъект.Подразделение	= СотрудникXML.ПодразделениеСсылка;
	СотрОбъект.Должность		= СотрудникXML.ДолжностьСсылка; 
	СотрОбъект.ДатаРождения		= ИзСтрокиВДату(СотрудникXML.ДатаРождения);
	СотрОбъект.Пол  			= Перечисления.инкПол.Мужской;
	Если СотрудникXML.Пол = "Ж" Тогда
		СотрОбъект.Пол = Перечисления.инкПол.Женский;
	КонецЕсли;
	СотрОбъект.ДатаПриемаНаРаботу = ИзСтрокиВДату(СотрудникXML.ДатаПриема);
	СотрОбъект.ДатаУвольнения = ИзСтрокиВДату(СотрудникXML.ДатаУвольнения);
	СотрОбъект.Уволен = ЗначениеЗаполнено(СотрОбъект.ДатаУвольнения);
	СотрОбъект.РайонныйКоэффициент = Число(СотрудникXML.РК);	
	СотрОбъект.СевернаяНадбавка = Число(СотрудникXML.КН); 
	СотрОбъект.Гражданство = ПоискСтраныМираПоКоду(ИсходныеДанные,СотрудникXML.Гражданство);
	СотрОбъект.ТабельныйНомер = СотрудникXML.ТабельныйНомер; 
	СотрОбъект.Совместитель = ЗначениеЗаполнено(СотрудникXML.Совместитель);
	СотрОбъект.СовместительДата = ИзСтрокиВДату(СотрудникXML.СовместительДата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискСтраныМираПоКоду(ИсходныеДанные,ГражданствоКод) 
	
	СтраныМираСсылка = Справочники.СтраныМира.ПустаяСсылка();
	СтраныМираТаблица = ИсходныеДанные.СтраныМираТаблица;
	
	ПоискСтруктура = Новый Структура("Код", ГражданствоКод);
	СтраныМираМассив = СтраныМираТаблица.НайтиСтроки(ПоискСтруктура);
	Для каждого СтраныМираЭлемент из СтраныМираМассив Цикл
		СтраныМираСсылка = СтраныМираЭлемент.Ссылка;
	КонецЦикла;
	
	Возврат СтраныМираСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеРеквизитыСотрудника(ИсходныеДанные,СотрОбъект,СотрудникXML)
	
	ЗаписьПоСотруднику_Статус(ИсходныеДанные,СотрОбъект,СотрудникXML);
	ЗаписьПоСотруднику_ДоходСПредыдущегоМестаРаботы(ИсходныеДанные,СотрОбъект,СотрудникXML);
	ЗаписьПоСотруднику_Паспорт(ИсходныеДанные,СотрОбъект,СотрудникXML);
	ЗаписьПоСотруднику_Инвалидность(ИсходныеДанные,СотрОбъект,СотрудникXML);
	ЗаписьПоСотруднику_СтандартныеВычеты(ИсходныеДанные,СотрОбъект,СотрудникXML);
	ЗаписьПоСотруднику_ИмущественныеВычеты(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_Статус(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
	СотрОбъект.СтатусРезидента = Перечисления.инкСтатусыРезидентов.Резидент;
	Если СотрудникXML.Статус.Статус <> "Резидент" Тогда
		СотрОбъект.СтатусРезидента = Перечисления.инкСтатусыРезидентов.Нерезидент;
	КонецЕсли;

КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_ДоходСПредыдущегоМестаРаботы(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
	стДоход = СотрудникXML.ДоходСПредыдущегоМестаРаботы;	
	Если стДоход.Сумма <> "0" Тогда
		СотрОбъект.ОблагаемыйДоходСНачалаГода = Число(стДоход.Сумма);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_Паспорт(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
	стДокумент = СотрудникXML.Документ;
	СотрОбъект.ДокументУдостоверяющийЛичность = ПолучитьВидДокумента(стДокумент.КодДокумента);
	СотрОбъект.ДокументСерия = стДокумент.Серия;
	СотрОбъект.ДокументНомер = стДокумент.Номер;
	СотрОбъект.ДокументДата =  ИзСтрокиВДату(стДокумент.ДатаВыдачи);                     
	СотрОбъект.ДокументВыдан = стДокумент.КемВыдан;
	СотрОбъект.ДокументКодПодразделения = стДокумент.КодПодразделения;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_Инвалидность(ИсходныеДанные,СотрОбъект,СотрудникXML);
		
	элИнвалид = СотрудникXML.Инвалид;
	СотрОбъект.Инвалид = (элИнвалид.Инвалидность = "Истина");
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_СтандартныеВычеты(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
	мСтВыч = СотрудникXML.СтандартныеВычетыМассив;
	мВычеты = Новый Массив;	
	
	Если мСтВыч.Количество() > 0 Тогда
		
		// Получим массив вычетов, которые нужно добавить по сотруднику:
		Для каждого элВычет Из мСтВыч Цикл
			
			ВычетНайден = Ложь;
			Для каждого НалоговыеВычетыСтрока Из СотрОбъект.НалоговыеВычеты Цикл				
				// Попытаемся найти вычет:
				Если Найти(НалоговыеВычетыСтрока.ВычетНДФЛ.Код, элВычет.Код) > 0 Тогда
					ВычетНайден = Истина;
					Прервать;					
				КонецЕсли;
			КонецЦикла; 
			
			Если (Не ВычетНайден) Тогда				
				мВычеты.Добавить(элВычет);					
			КонецЕсли; 
			
		КонецЦикла; 				
		
		// Оформим документами ыычеты которые необходимо предоставить:
		Если мВычеты.Количество() > 0 Тогда
			
			Для каждого элМассива Из мВычеты Цикл				

				// Получим даду С и ПО:
				Если элМассива.ДатаС="" Тогда
					элДатаС = НачалоГода(ТекущаяДата());		
				Иначе
					элДатаС = ИзСтрокиВДату(элМассива.ДатаС);
				КонецЕсли;          
				Если элМассива.ДатаПо="" Тогда
					элДатаПо = КонецГода(ТекущаяДата());		
				Иначе
					элДатаПо = ИзСтрокиВДату(элМассива.ДатаПо);
				КонецЕсли; 
				
				// Если вычет попадает на этот год, тогда попробуем найти его код:
				Если Год(элДатаПо) >= Год(ТекущаяДата()) Тогда
					
					ссКодВычета = Справочники.инкВычетыНДФЛ.ПустаяСсылка(); 
					
					Если элМассива.Код = "114" Тогда
						ссКодВычета = Справочники.инкВычетыНДФЛ.Код108;
					ИначеЕсли элМассива.Код = "118" Тогда 
						ссКодВычета = Справочники.инкВычетыНДФЛ.Код110;
					ИначеЕсли элМассива.Код = "116" Тогда 
						ссКодВычета = Справочники.инкВычетыНДФЛ.Код116;
					ИначеЕсли элМассива.Код = "115" Тогда 
						ссКодВычета = Справочники.инкВычетыНДФЛ.Код115;
					ИначеЕсли элМассива.Код = "104" Тогда 
						ссКодВычета = Справочники.инкВычетыНДФЛ.Код104;						
					Иначе
						ссКодВычета = Справочники.инкВычетыНДФЛ.НайтиПоКоду(элМассива.Код);	
					КонецЕсли;			
					
					// Попробуем найти код по контексту:
					Если (ссКодВычета = Справочники.инкВычетыНДФЛ.ПустаяСсылка()) Тогда
						
						Для каждого инкВычетыНДФЛСтрока из ИсходныеДанные.ВычетыНДФЛТаблица Цикл
							Если СтрНайти(инкВычетыНДФЛСтрока.Код,элМассива.Код) > 0 Тогда
								ссКодВычета = инкВычетыНДФЛСтрока.Ссылка; 
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;					
					
					// Если коды не найдены:
					Если (ссКодВычета = Справочники.инкВычетыНДФЛ.ПустаяСсылка()) Тогда
						ТекстВОтчет(ИсходныеДанные,"Не найден код вычета: "+элМассива.Код);
						Продолжить;					
					КонецЕсли;
					
					НалоговыеВычетыСтрока = СотрОбъект.НалоговыеВычеты.Добавить();
					НалоговыеВычетыСтрока.ВычетНДФЛ		= ссКодВычета;
					НалоговыеВычетыСтрока.ДействуетС    = элДатаС;
					НалоговыеВычетыСтрока.ДействуетПо   = элДатаПо;
					
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписьПоСотруднику_ИмущественныеВычеты(ИсходныеДанные,СотрОбъект,СотрудникXML);
	
	стИмущественныйВычет = СотрудникXML.ИмущественныйВычет; 
	Если Число(стИмущественныйВычет.Сумма) <> 0 Тогда
		
		СотрОбъект.ИмущественныйВычетКодВычета = Справочники.инкВычетыНДФЛ.Код311;
		СотрОбъект.ИмущественныйВычетНомерУведомления = стИмущественныйВычет.НомерУведомления;
		//
		ДатаВыдачи = ИзСтрокиВДату(стИмущественныйВычет.ДатаВыдачи);
		СотрОбъект.ИмущественныйВычетДатаВыдачи = ДатаВыдачи;
		//
		СотрОбъект.ИмущественныйВычетКодФНС = стИмущественныйВычет.КодФНС;
		СотрОбъект.ИмущественныйВычетСумма = Число(стИмущественныйВычет.Сумма);
		
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзСтрокиВДату(СтрДата)
	
	Если СтрДата="" Тогда
		датДата = Дата("00010101");	
	Иначе
	    стрДата_ = СокрЛП(СтрЗаменить(стрДата,".",""));
	    датДата = Сред(стрДата_,5)+Сред(стрДата_,3,2)+Лев(стрДата_,2);
	    Если СтрДлина(стрДата_)=6 Тогда
	        датДата = "20"+датДата;
	    КонецЕсли;    		
	КонецЕсли; 
	
    Возврат Дата(датДата);
	
 КонецФункции         

&НаСервереБезКонтекста
Функция ПолучитьВидДокумента(КодДокумента)
	
	ссДокумент = Справочники.инкВидыДокументовФизическихЛиц.ПустаяСсылка();
	Если КодДокумента = "21" Тогда
		ссДокумент = Справочники.инкВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли КодДокумента <> "0" Тогда
		ссДокумент = Справочники.инкВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД",КодДокумента);	
	КонецЕсли;  	
	
	Возврат ссДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьУдержания(ИсходныеДанные)
	
	МассивУдержанийXML = ИсходныеДанные.МассивУдержанийXML;
    МассивНачисленийXML = ИсходныеДанные.МассивНачисленийXML; 
    УдержанияТаблица = ИсходныеДанные.УдержанияТаблица;
	
	Для каждого элУдержание Из МассивУдержанийXML Цикл
        ОбработатьУдержание(элУдержание,МассивУдержанийXML,УдержанияТаблица,ИсходныеДанные);
    КонецЦикла;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдержаниеВНачислении(элНачисление)
    
    ЭтоУдержаниеБулево = Ложь;
    
    Код = "";
    Если элНачисление.Свойство("КодРасчета") Тогда
        Код = элНачисление.КодРасчета;
    ИначеЕсли элНачисление.Свойство("НачислениеКод") Тогда
        Код = элНачисление.НачислениеКод;    
    КонецЕсли; 
    
    Если Код = "10000" ИЛИ 
         Код = "10001" ИЛИ
         Лев(Код,1) = "2" 
    Тогда
        ЭтоУдержаниеБулево = Истина;	
    КонецЕсли;  
    
    Возврат ЭтоУдержаниеБулево;
    
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаНачисленийВПроцентах(ИсходныеДанные)
	
	МассивНачисленийXML = ИсходныеДанные.МассивНачисленийXML; 
	БазовыеНачисленияТаблица = ИсходныеДанные.НачисленияТаблица;
	
	Для каждого элНачисление Из МассивНачисленийXML Цикл
		
		Если Не элНачисление.Свойство("НачислениеСсылка") Тогда
			Продолжить;	
		КонецЕсли;
		
		НачислениеСсылка = элНачисление.НачислениеСсылка;
		Если НачислениеСсылка.ВПроцентах Тогда
			
			НомераНачисленийСтрока = элНачисление.CREAPROC;             
			Если Не ЗначениеЗаполнено(НомераНачисленийСтрока) Тогда
				Продолжить;	
			КонецЕсли;
			НомераНачисленийМассив = СтрРазделить(НомераНачисленийСтрока, "+");
			
			Если НомераНачисленийМассив.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			НачислениеОбъект = НачислениеСсылка.ПолучитьОбъект();
			НачислениеОбъект.БазовыеВидыРасчета.Очистить();
			Для каждого НомерНачисленийЭлемент Из НомераНачисленийМассив Цикл
				
				КодПоискаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНачисленийЭлемент, 5, "0", "Слева");
				ПоискНачисления = Новый Структура("КодВСтаройПрограмме",КодПоискаСтрока);
				БазовыеНачисленияМассив = БазовыеНачисленияТаблица.НайтиСтроки(ПоискНачисления);
				
				Если БазовыеНачисленияМассив.Количество() = 0 Тогда
					Продолжить;	
				КонецЕсли;
				    			 
				Для каждого БазовоеНачислениеЭлемент Из БазовыеНачисленияМассив Цикл
					БазовыйВидРасчетаСтрока = НачислениеОбъект.БазовыеВидыРасчета.Добавить();	
					БазовыйВидРасчетаСтрока.ВидРасчета = БазовоеНачислениеЭлемент.Ссылка;
				КонецЦикла;     
								
			КонецЦикла;
			НачислениеОбъект.Записать();
			    		
		КонецЕсли;
		
	КонецЦикла;  
	   
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНачисления(ИсходныеДанные)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	МассивНачисленийXML = ИсходныеДанные.МассивНачисленийXML;  
    МассивУдержанийXML = ИсходныеДанные.МассивУдержанийXML; 
	НачисленияТаблица = ИсходныеДанные.НачисленияТаблица; 
    УдержанияТаблица = ИсходныеДанные.УдержанияТаблица;

	Для каждого элНачисление Из МассивНачисленийXML Цикл
        
        // Отлавливаем удержания среди начислений:
        элНачисление.Вставить("ЭтоУдержание",УдержаниеВНачислении(элНачисление));
        Если элНачисление.ЭтоУдержание Тогда
            ОбработатьУдержание(элНачисление,МассивУдержанийXML,УдержанияТаблица,ИсходныеДанные);
        Иначе
            ОбработатьНачисление(элНачисление,МассивНачисленийXML,НачисленияТаблица,ИсходныеДанные);
        КонецЕсли; 
        
	КонецЦикла;  
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбработатьУдержание(элУдержание,МассивУдержанийXML,УдержанияТаблица,ИсходныеДанные)
    
    УдержаниеСсылка = ПланыВидовРасчета.инкУдержания.ПустаяСсылка();
    
    // Получаем ссылку на объект:
    //ПоискСтруктура = Новый Структура("Код",элУдержание.КодРасчета);
	ПоискСтруктура = Новый Структура("КодВСтаройПрограмме",элУдержание.КодРасчета);
    УдержанияМассив = УдержанияТаблица.НайтиСтроки(ПоискСтруктура);
    
    Для каждого УдержаниеЭлемент из УдержанияМассив Цикл
        УдержаниеСсылка = УдержаниеЭлемент.Ссылка;
    КонецЦикла;
    
    Если УдержаниеСсылка = ПланыВидовРасчета.инкУдержания.ПустаяСсылка() Тогда

        НовыйВидРасчета = ПланыВидовРасчета.инкУдержания.СоздатьВидРасчета();
        НовыйВидРасчета.Наименование = элУдержание.Наименование;
        НовыйВидРасчета.Код = элУдержание.КодРасчета;
		НовыйВидРасчета.КодВСтаройПрограмме = элУдержание.КодРасчета;
		НовыйВидРасчета.Записать();
        
        ДобавитьЭлементСправочникаВТаблицу(УдержанияТаблица,НовыйВидРасчета);
        
        УдержаниеСсылка = НовыйВидРасчета.Ссылка;
        
        ТекстВОтчет(ИсходныеДанные,"Удержание: "+УдержаниеСсылка+" код: "+УдержаниеСсылка.КодВСтаройПрограмме+" добавлено в базу данных.");
        
    КонецЕсли; 	
    
    НовыйВидРасчета = УдержаниеСсылка.ПолучитьОбъект();
    НовыйВидРасчета.Код = элУдержание.КодРасчета;	
    НовыйВидРасчета.Наименование = элУдержание.Наименование;
    Если элУдержание.Свойство("ЭтоУдержание") Тогда
        НовыйВидРасчета.Кредит = ПланыСчетов.инкХозрасчетный.НайтиПоКоду(элУдержание.Дебет);
    Иначе
        НовыйВидРасчета.Кредит = ПланыСчетов.инкХозрасчетный.НайтиПоКоду(элУдержание.Кредит);    
    КонецЕсли; 
    
    НовыйВидРасчета.Записать();		
                        
    элУдержание.Вставить("УдержаниеСсылка",УдержаниеСсылка);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьНачисление(элНачисление,МассивНачисленийXML,НачисленияТаблица,ИсходныеДанные)
    
    // Получаем ссылку на объект:
    НачислениеСсылка = ПланыВидовРасчета.инкНачисления.ПустаяСсылка();
    
    ПоискСтруктура = Новый Структура("КодВСтаройПрограмме",элНачисление.КодРасчета);
    НачисленияМассив = НачисленияТаблица.НайтиСтроки(ПоискСтруктура);
    
    Для каждого НачислениеЭлемент из НачисленияМассив Цикл
        НачислениеСсылка = НачислениеЭлемент.Ссылка;
    КонецЦикла;
    
    Если НачислениеСсылка = ПланыВидовРасчета.инкНачисления.ПустаяСсылка() Тогда
        
        НачислениеОбъект = ПланыВидовРасчета.инкНачисления.СоздатьВидРасчета();
		НачислениеОбъект.Код = элНачисление.КодРасчета;
		НачислениеОбъект.Наименование = элНачисление.Наименование;
		НачислениеОбъект.КодВСтаройПрограмме = элНачисление.КодРасчета;		
        // Значения по-умолчанию
        //НачислениеОбъект.Отпуск = Истина; 
        //НачислениеОбъект.БольничныйЛист = Истина;
        НачислениеОбъект.Налог = Истина;
        
        НачислениеОбъект.Записать();
        
        ДобавитьЭлементСправочникаВТаблицу(НачисленияТаблица,НачислениеОбъект);
        
        НачислениеСсылка = НачислениеОбъект.Ссылка;
        
        ТекстВОтчет(ИсходныеДанные,"Начисление: "+НачислениеОбъект.Ссылка+", код: "+НачислениеОбъект.КодВСтаройПрограмме+" добавлено в базу данных.");
        
    КонецЕсли; 
    
    // Обновляем данные по начислению:
	Если НЕ НачислениеСсылка.Предопределенный Тогда

		НачислениеОбъект = НачислениеСсылка.ПолучитьОбъект();  
		НачислениеОбъект.Код = элНачисление.КодРасчета;	
	    НачислениеОбъект.ДоходНДФЛ = ПолучитьДоходНДФЛ(ИсходныеДанные,элНачисление.КодДоходаНДФЛ);
	    //                   
	    НачислениеОбъект.Взносы = ПолучитьЗначениеПоВзносам(элНачисление.Взносы);
	    НачислениеОбъект.Ст9ФЗ212 = ПолучитьЗначениеПоВзносам(элНачисление.Ст9ФЗ);
	    НачислениеОбъект.МатериальнаяПомощь = ПолучитьЗначениеПоВзносам(элНачисление.МатПомощь);
	    //
	    НачислениеОбъект.ФондТравматизма = (элНачисление.ФондТравмотизма = "+");
	    //
	    НачислениеОбъект.ВПроцентах = (элНачисление.ВПроцентах = "+"); 
	    НачислениеОбъект.РайонныйКоэффициент = (элНачисление.РК = "+"); 
	    НачислениеОбъект.СевернаяНадбавка = (элНачисление.КН = "+"); 
	    НачислениеОбъект.Налог = (элНачисление.Налог = "+"); 
	    НачислениеОбъект.Отпуск = (элНачисление.Отпуск = "+"); 
	    НачислениеОбъект.БольничныйЛист = (элНачисление.БольничныйЛист = "+"); 
	    //
	    НачислениеОбъект.ВычетНДФЛ = ПолучитьВычетНДФЛ(ИсходныеДанные,элНачисление.КодВычета);
	    НачислениеОбъект.Дебет = ПланыСчетов.инкХозрасчетный.НайтиПоКоду(элНачисление.Дебет);
	    //
	    НачислениеОбъект.Записать();
		
	КонецЕсли;
    
    элНачисление.Вставить("НачислениеСсылка",НачислениеСсылка);
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПоВзносам(ЗначениеПараметра)
    
    //      взносы (если -, то у нас ниже будет расшифровка (т.е. куда это начисление не входит, значит булево ИСТИНА):
    ЗначениеБулево = Ложь;
    Если (ЗначениеПараметра = "+") ИЛИ (ЗначениеПараметра = "-") Тогда
        ЗначениеБулево = Истина;	
    КонецЕсли; 
    
    Возврат ЗначениеБулево; 
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоходНДФЛ(ИсходныеДанные,КодДоходаНДФЛ)
	
	ДоходНДФЛ = Справочники.инкДоходНДФЛ.ПустаяСсылка();	
	
	Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
	
		ДоходыНДФЛТаблица = ИсходныеДанные.ДоходыНДФЛТаблица;
		ПоискСтруктура = Новый Структура("Код",КодДоходаНДФЛ);
		ДоходыНДФЛМассив = ДоходыНДФЛТаблица.НайтиСтроки(ПоискСтруктура);
		Для каждого ДоходНДФЛЭлемент из ДоходыНДФЛМассив Цикл
			ДоходНДФЛ = ДоходНДФЛЭлемент.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДоходНДФЛ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВычетНДФЛ(ИсходныеДанные,КодВычетаНДФЛ)
	
	ВычетНДФЛ = Справочники.инкВычетыНДФЛ.ПустаяСсылка();	
	
	Если ЗначениеЗаполнено(КодВычетаНДФЛ) Тогда
	
		ВычетыНДФЛТаблица = ИсходныеДанные.ВычетыНДФЛТаблица;
		ПоискСтруктура = Новый Структура("Код",КодВычетаНДФЛ);
		ВычетыНДФЛМассив = ВычетыНДФЛТаблица.НайтиСтроки(ПоискСтруктура);
		Для каждого ВычетНДФЛЭлемент из ВычетыНДФЛМассив Цикл
			ВычетНДФЛ = ВычетНДФЛЭлемент.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВычетНДФЛ;   
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьПодразделения(ИсходныеДанные)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;	
	МассивПодразделенийXML = ИсходныеДанные.МассивПодразделенийXML;
	
	Для каждого элПодразделение Из МассивПодразделенийXML Цикл
		ссПодразделение = ЗаписьДанныхПодразделения(ИсходныеДанные,элПодразделение,ОрганизацияXML.ОрганизацияСсылка);
		элПодразделение.Вставить("ПодразделениеСсылка",ссПодразделение); 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьДанныхПодразделения(ИсходныеДанные,элПодразделение,ссОрганизация)
	
	ПодрСсылка = Справочники.инкПодразделения.ПустаяСсылка();
	
	ПодразделенияТаблица = ИсходныеДанные.ПодразделенияТаблица;
	
	ПоискСтруктура = Новый Структура("Наименование",элПодразделение.Имя);
	ПодразделенияМассив = ПодразделенияТаблица.НайтиСтроки(ПоискСтруктура);
	
	Для каждого ПодразделениеЭлемент из ПодразделенияМассив Цикл
		ПодрСсылка = ПодразделениеЭлемент.Ссылка;
	КонецЦикла;	
	
	Если ПодрСсылка = Справочники.инкПодразделения.ПустаяСсылка() Тогда
		
		ПодрЭлем = Справочники.инкПодразделения.СоздатьЭлемент();
		ПодрЭлем.Владелец 		= ссОрганизация; 
		ПодрЭлем.Записать();	
		
		ДобавитьЭлементСправочникаВТаблицу(ПодразделенияТаблица,ПодрЭлем);		
	
		ПодрСсылка = ПодрЭлем.Ссылка;
		
		ТекстВОтчет(ИсходныеДанные,"Подразделение "+элПодразделение.Имя+" добавлено в базу данных.");
		
	КонецЕсли; 
	
	ПодрЭлем = ПодрСсылка.ПолучитьОбъект();
	ПодрЭлем.Владелец 				= ссОрганизация; 
	ПодрЭлем.Наименование 			= элПодразделение.Имя;
	ПодрЭлем.КодВСтаройПрограмме 	= элПодразделение.Код;
	ПодрЭлем.Записать();	
	
	Возврат ПодрСсылка; 	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОрганизацию(ИсходныеДанные)
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
    ОрганизацииТаблица	= ИсходныеДанные.ОрганизацииТаблица;
	ОрганизацияСсылка = ПолучитьСсылкуОрганизации(ИсходныеДанные,ОрганизацияXML,ОрганизацииТаблица);
	ОрганизацияXML.Вставить("ОрганизацияСсылка",ОрганизацияСсылка);	
	ОрганизацияXML.Вставить("РуководительСсылка",ОрганизацияСсылка.Руководитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуОрганизации(ИсходныеДанные,ОрганизацияXML,ОрганизацииТаблица)
	
	ОрганизацияСсылка = Справочники.инкОрганизации.ПустаяСсылка();
	
	// Поиск организации по параметрам:
	ПоискСтруктура = Новый Структура;
	ПоискСтруктура.Вставить("ИНН",ОрганизацияXML.ИНН);
	ПоискСтруктура.Вставить("КПП",ОрганизацияXML.КПП);
	ОрганизацииМассив = ОрганизацииТаблица.НайтиСтроки(ПоискСтруктура);
	
	Для каждого ОрганизацияЭлемент из ОрганизацииМассив Цикл
		ОрганизацияСсылка = ОрганизацияЭлемент.Ссылка;
	КонецЦикла;	
		
	Если ОрганизацияСсылка = Справочники.инкОрганизации.ПустаяСсылка() Тогда
		
		ОргЭлемент = Справочники.инкОрганизации.СоздатьЭлемент();
		ОргЭлемент.Наименование = ОрганизацияXML.НаименованиеОрганизации;
		ОргЭлемент.Записать();
		
		ДобавитьЭлементСправочникаВТаблицу(ОрганизацииТаблица,ОргЭлемент);		
		
		ОрганизацияСсылка = ОргЭлемент.Ссылка;
		
		ТекстВОтчет(ИсходныеДанные,"Организация "+ОрганизацияСсылка+" добавлена в базу данных.");
		
	КонецЕсли; 
	
	ОргЭлемент = ОрганизацияСсылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ОргЭлемент,ОрганизацияXML);
	ОргЭлемент.ВидОсновнойДеятельности = ПолучитьВидОсновнойДеятельности(ОрганизацияXML.СН);
	ОргЭлемент.Записать();
	
	Возврат ОрганизацияСсылка;	
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьВидОсновнойДеятельности(СН)
	
	ВидОсновнойДеятельности = Перечисления.инкВидОсновнойДеятельности.ПустаяСсылка();
	
	Если СН = "ОСНО" Тогда
		ВидОсновнойДеятельности = Перечисления.инкВидОсновнойДеятельности.ОСНО;
	ИначеЕсли СН = "УСНО" Тогда
		ВидОсновнойДеятельности = Перечисления.инкВидОсновнойДеятельности.УСНО;
	ИначеЕсли СН = "ЕНВД" Тогда
		ВидОсновнойДеятельности = Перечисления.инкВидОсновнойДеятельности.ЕНВД;
	КонецЕсли;		
	
	Возврат ВидОсновнойДеятельности;
	
КонецФункции

#КонецОбласти

#Область о // Формирование документов начисления зарплаты: 

&НаСервереБезКонтекста
Процедура ЗагрузитьДокументыНаСервере(АдресВоВремХранилище, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	 НачатьТранзакцию();

    Попытка
		ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресВоВремХранилище);	
		ЗагрузитьДокументыНачисленийЗарплаты(ИсходныеДанные,Отказ);
		
		ЗафиксироватьТранзакцию();
	Исключение
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Ошибка при записи документов в базу. Описание ошибки: "+ОписаниеОшибки());
		ОтменитьТранзакцию();
    КонецПопытки;
	     	          	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьДокументыНачисленийЗарплаты(ИсходныеДанные,Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостейXML = ИсходныеДанные.МассивВедомостейXML;
	ИсходныеДанные.Вставить("НачисленияЗарплатыТаблица",ПолучитьНачисленияЗарплатыНаСервере());
	ИсходныеДанные.Вставить("ДокументыНачисленияЗарплаты",Новый Массив);
	
	Для каждого ВедомостьСтрока из МассивВедомостейXML Цикл
		
		ДанныеВедомости 	 = ВедомостьСтрока.ДанныеВедомости;
		мНачисленийВедомости = ВедомостьСтрока.НачисленияВедомости;				
		мУдержанийВедомости	 = ВедомостьСтрока.УдержанияВедомости;
		МесяцНачисления      = Дата(ДанныеВедомости.МесяцНачисления);
		ссДокумент           = ПроверкаНаличиядНачислениеЗП(ИсходныеДанные,ВедомостьСтрока);
		
		Если ЗначениеЗаполнено(ссДокумент) Тогда
			ТекстВОтчет(ИсходныеДанные,"Внимание! Уже сформирован документ: "+ссДокумент
			                          +" по организации: "+ссДокумент.Организация
									  +" подразделению: "+ссДокумент.Подразделение
									  +" месяцу: "+ссДокумент.МесяцНачисления
									  +". Документ внешнего начилсения зп за этот период сформирован не будет.");			
		Иначе
			ЗаписатьНачислениеЗарплатыНаСервере(ИсходныеДанные,ВедомостьСтрока,Отказ);
		КонецЕсли;
		
		// Отладка, для формирование только одной ведомости:
		//Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьУдержаниеВДокумент(дНачислениеЗП,элУдержание)
    
    УдержаниеРазмер = Число(элУдержание.Результат);
    // В начислениях удержание будет с "-":
    Если УдержаниеРазмер < 0 Тогда
    	УдержаниеРазмер = УдержаниеРазмер * (-1);
    КонецЕсли; 

    // Добавляем в удержания:	
    стрУдержание = дНачислениеЗП.ПрочиеУдержания.Добавить();
    стрУдержание.Сотрудник = элУдержание.СотрудникСсылка;
    стрУдержание.Подразделение = элУдержание.ПодразделениеСсылка; 
    стрУдержание.Удержание = элУдержание.УдержаниеСсылка;
    стрУдержание.СуммаУдержания	= УдержаниеРазмер;	

КонецПроцедуры
    
&НаСервереБезКонтекста
Процедура ЗаписатьНачислениеЗарплатыНаСервере(ИсходныеДанные,ВедомостьСтрока,Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияXML = ИсходныеДанные.ОрганизацияXML;
	мНачисленийВедомости = ВедомостьСтрока.НачисленияВедомости;	
	мУдержанийВедомости = ВедомостьСтрока.УдержанияВедомости; 
	
	дНачислениеЗП = Документы.инкНачислениеЗарплаты.СоздатьДокумент();
	дНачислениеЗП.Дата = КонецМесяца(Дата(ВедомостьСтрока.ДанныеВедомости.МесяцНачисления));
	дНачислениеЗП.МесяцНачисления = Дата(ВедомостьСтрока.ДанныеВедомости.МесяцНачисления);
	дНачислениеЗП.Организация   = ОрганизацияXML.ОрганизацияСсылка;
	дНачислениеЗП.Подразделение = ВедомостьСтрока.ДанныеВедомости.ПодразделениеСсылка; 
	дНачислениеЗП.Ответственный = Пользователи.ТекущийПользователь();
	дНачислениеЗП.ИдентификаторЗагрузки = ИсходныеДанные.ИдентификаторЗагрузки;
	дНачислениеЗП.ЗагрузкаИзВнешнегоИсточника = Истина;
	
    дНачислениеЗП.УчитыватьКакСальдоСуммуЗаПредыдущийМесяц = Ложь;
    Если ОрганизацияXML.УчитыватьСальдоКакСуммуЗаПредыдущийМесяц = "Истина" Тогда
        дНачислениеЗП.УчитыватьКакСальдоСуммуЗаПредыдущийМесяц = Истина;	
    КонецЕсли; 
    
	// ПрочиеНачисления:
	дНачислениеЗП.ПрочиеНачисления.Очистить();
	Для каждого элНачисление Из мНачисленийВедомости Цикл
        
        // Оклад, РК и СН мы обрабатываем отдельно:
		Если элНачисление.НачислениеКод = "ОКЛ" ИЛИ
			 элНачисление.НачислениеКод = "Р/К" ИЛИ
			 элНачисление.НачислениеКод = "С/Н" ИЛИ
             элНачисление.НачислениеКод = "САЛЬДО_ВХОДЯЩЕЕ"
		Тогда
			Продолжить;
        КонецЕсли;
        
        // Отдельно обрабатываем удержания попавшие в начисления:
        Если УдержаниеВНачислении(элНачисление) Тогда
            Продолжить;
        КонецЕсли;        
        		
		стрНачисление = дНачислениеЗП.ПрочиеНачисления.Добавить();
		стрНачисление.Сотрудник = элНачисление.СотрудникСсылка;
		стрНачисление.Подразделение = элНачисление.ПодразделениеСсылка;
		стрНачисление.Начисление = элНачисление.НачислениеСсылка;
		стрНачисление.СуммаНачисления = Число(элНачисление.Результат);
		стрНачисление.ВычетНДФЛ  = ПолучитьВычетНДФЛ(ИсходныеДанные,элНачисление.ВычетКод);  
		стрНачисление.СуммаВычета = Число(элНачисление.ВычетСумма);
		стрНачисление.РайонныйКоэффициент = 0;
		стрНачисление.СевернаяНадбавка = 0;
		
	КонецЦикла; 
	
	// Прочие удержания: 
	дНачислениеЗП.ПрочиеУдержания.Очистить();
	Для каждого элУдержание Из мУдержанийВедомости Цикл
        ДобавитьУдержаниеВДокумент(дНачислениеЗП,элУдержание);
    КонецЦикла; 
    
    // Удеражиня которые попали в начисления:
    Для каждого элНачисление Из мНачисленийВедомости Цикл
        Если УдержаниеВНачислении(элНачисление) Тогда
            ДобавитьУдержаниеВДокумент(дНачислениеЗП,элНачисление);
        КонецЕсли;        
	КонецЦикла; 
	
	// Ведомости:
	СотрудникиМассив = Новый Массив;
	Для каждого НачислениеСтрока из мНачисленийВедомости Цикл
		СотрудникиМассив.Добавить(НачислениеСтрока.СотрудникСсылка);
	КонецЦикла;
	Для каждого УдержаниеСтрока из мУдержанийВедомости Цикл
		СотрудникиМассив.Добавить(УдержаниеСтрока.СотрудникСсылка);
	КонецЦикла;
	СотрудникиМассив = инкОбщийСервер.УдалитьДублиИзМассива(СотрудникиМассив);
	
	дНачислениеЗП.Ведомость.Очистить();
	Для каждого СотрудникЭлемент из СотрудникиМассив Цикл
		
		ВедомостьСтрока = дНачислениеЗП.Ведомость.Добавить();
		ВедомостьСтрока.Сотрудник = СотрудникЭлемент;
		
		ОкладСумма = 0;
		РКСумма = 0;
		СНСумма = 0;
        СальдоВходящее = 0;
		Для каждого элНачисление Из мНачисленийВедомости Цикл
			
			Если элНачисление.СотрудникСсылка = СотрудникЭлемент Тогда

				Если элНачисление.НачислениеКод = "ОКЛ" Тогда
					ОкладСумма = ОкладСумма + Число(элНачисление.Результат);
					//
					ВедомостьСтрока.Дни			= элНачисление.Дни;	
					ВедомостьСтрока.ДниФакт 	= элНачисление.ДниФакт;	
					ВедомостьСтрока.Часы        = элНачисление.Часы;	
					ВедомостьСтрока.ЧасыФакт   	= элНачисление.ЧасыФакт;	
					//
				ИначеЕсли элНачисление.НачислениеКод = "САЛЬДО_ВХОДЯЩЕЕ" Тогда     
                    СальдоВходящее = СальдоВходящее + Число(элНачисление.Результат);    
                КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		ВедомостьСтрока.ОкладРазмер = ОкладСумма;		
        ВедомостьСтрока.СальдоВходящее = СальдоВходящее;
        
	КонецЦикла;
	
	дНачислениеЗП.ПересчетСотрудниковВОбъекте(); 
    РежимЗаписиДокументаЗП = РежимЗаписиДокумента.Запись; 
    Если ИсходныеДанные.ПроводитьДокументы Тогда
        РежимЗаписиДокументаЗП = РежимЗаписиДокумента.Проведение; 
    КонецЕсли;			
    дНачислениеЗП.Записать(РежимЗаписиДокументаЗП);    
	ТекстВОтчет(ИсходныеДанные,"Создан документ начисление зарплаты: "+дНачислениеЗП);
	ИсходныеДанные.ДокументыНачисленияЗарплаты.Добавить(дНачислениеЗП.Ссылка);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаличиядНачислениеЗП(ИсходныеДанные,ВедомостьСтрока)
	
	ссДокумент = Неопределено;
	
	ПоискДокумента = Новый Структура;
	ПоискДокумента.Вставить("МесяцНачисления", Дата(ВедомостьСтрока.ДанныеВедомости.МесяцНачисления));
	ПоискДокумента.Вставить("Подразделение", ВедомостьСтрока.ДанныеВедомости.ПодразделениеСсылка);
	ПоискДокумента.Вставить("Организация", ИсходныеДанные.ОрганизацияXML.ОрганизацияСсылка);
	
	ВнешниеНачисленияЗарплатыМассив = ИсходныеДанные.НачисленияЗарплатыТаблица.НайтиСтроки(ПоискДокумента);
	Для каждого ВнешнееНачисление из ВнешниеНачисленияЗарплатыМассив Цикл
		ссДокумент = ВнешнееНачисление.Ссылка; 
	КонецЦикла;	
	
    Возврат ссДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНачисленияЗарплатыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачислениеЗарплаты.Ссылка КАК Ссылка,
		|	инкНачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления,
		|	инкНачислениеЗарплаты.Организация КАК Организация,
		|	инкНачислениеЗарплаты.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.инкНачислениеЗарплаты КАК инкНачислениеЗарплаты
		|ГДЕ
		|	инкНачислениеЗарплаты.Проведен";
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Организация");
	тз.Индексы.Добавить("Подразделение");
	тз.Индексы.Добавить("МесяцНачисления");
	
	Возврат тз;
	
КонецФункции

#КонецОбласти




